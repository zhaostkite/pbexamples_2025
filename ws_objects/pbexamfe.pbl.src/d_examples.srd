$PBExportHeader$d_examples.srd
$PBExportComments$Used for Example List
release 22;
datawindow(units=0 data.export.format=1 timer_interval=0 color=16777215 brushmode=0 transparency=0 gradient.angle=0 gradient.color=8421504 gradient.focus=0 gradient.repetition.count=0 gradient.repetition.length=100 gradient.repetition.mode=0 gradient.scale=100 gradient.spread=100 gradient.transparency=0 picture.blur=0 picture.clip.bottom=0 picture.clip.left=0 picture.clip.right=0 picture.clip.top=0 picture.mode=0 picture.scale.x=100 picture.scale.y=100 picture.transparency=0 processing=1 HTMLDW=no print.printername="" print.documentname="" print.orientation = 0 print.margin.left = 110 print.margin.right = 110 print.margin.top = 97 print.margin.bottom = 97 print.paper.source = 0 print.paper.size = 0 print.canusedefaultprinter=yes print.prompt=no print.buttons=no print.preview.buttons=no print.cliptext=no print.overrideprintjob=no print.collate=yes print.background=no print.preview.background=no print.preview.outline=yes hidegrayline=no showbackcoloronxp=no picture.file="" grid.lines=0 )
header(height=64 color="536870912" transparency="0" gradient.color="8421504" gradient.transparency="0" gradient.angle="0" brushmode="0" gradient.repetition.mode="0" gradient.repetition.count="0" gradient.repetition.length="100" gradient.focus="0" gradient.scale="100" gradient.spread="100" )
summary(height=0 color="536870912" transparency="0" gradient.color="8421504" gradient.transparency="0" gradient.angle="0" brushmode="0" gradient.repetition.mode="0" gradient.repetition.count="0" gradient.repetition.length="100" gradient.focus="0" gradient.scale="100" gradient.spread="100" )
footer(height=0 color="536870912" transparency="0" gradient.color="8421504" gradient.transparency="0" gradient.angle="0" brushmode="0" gradient.repetition.mode="0" gradient.repetition.count="0" gradient.repetition.length="100" gradient.focus="0" gradient.scale="100" gradient.spread="100" )
detail(height=84 color="536870912" transparency="0" gradient.color="8421504" gradient.transparency="0" gradient.angle="0" brushmode="0" gradient.repetition.mode="0" gradient.repetition.count="0" gradient.repetition.length="100" gradient.focus="0" gradient.scale="100" gradient.spread="100" )
table(column=(type=char(40) updatewhereclause=yes name=group_id dbname="examples_groups.group_id" )
 column=(type=char(32765) updatewhereclause=yes name=description dbname="examples.description" )
 column=(type=char(60) updatewhereclause=yes name=title dbname="examples.title" )
 column=(type=char(40) updatewhereclause=yes name=window dbname="examples.window" )
 column=(type=char(5) updatewhereclause=yes name=version dbname="examples.version" )
 column=(type=char(32765) updatewhereclause=yes name=technique dbname="examples.technique" )
 column=(type=long updatewhereclause=yes name=new dbname="examples.new" )
 column=(type=long updatewhereclause=yes name=enhanced dbname="examples.enhanced" )
 column=(type=char(40) updatewhereclause=yes name=ostype dbname="examples.ostype" )
 column=(type=char(17) updatewhereclause=yes name=pbtype dbname="examples.pbtype" )
 column=(type=long updatewhereclause=yes name=exhelp dbname="examples.exhelp" )
 retrieve="PBSELECT( VERSION(400) TABLE(NAME=~"examples~" )  TABLE(NAME=~"examples_groups~" ) COLUMN(NAME=~"examples_groups.group_id~") COLUMN(NAME=~"examples.description~") COLUMN(NAME=~"examples.title~") COLUMN(NAME=~"examples.window~") COLUMN(NAME=~"examples.version~") COLUMN(NAME=~"examples.technique~") COLUMN(NAME=~"examples.new~") COLUMN(NAME=~"examples.enhanced~") COLUMN(NAME=~"examples.ostype~") COLUMN(NAME=~"examples.pbtype~") COLUMN(NAME=~"examples.exhelp~")    JOIN (LEFT=~"examples.window~"    OP =~"=~"RIGHT=~"examples_groups.window~" )) ORDER(NAME=~"examples_groups.group_id~" ASC=yes )  ORDER(NAME=~"examples.title~" ASC=yes ) " filter=" title ='PB DDE Client & Server'" sort="window A " )
data("Data Pipeline","This example will use the Data Pipeline to:
1) Copy a table structure and data
2) Copy a table structure, no data
3) Execute a transaction - master update","Data PipeLine","w_pipeline","4.0","This uses the Data Pipeline Object.  The object is created as a user object that is inherited from the systems Pipeline object.  Once the object is created, pre-created or dynamically created Data Pipeline may be executed in the runtime environment within applications. The objects are created and the ~"DataObject~" attribute is used to assign the user object a specific Data Pipeline definition.  PowerScript functions used with the Pipeline object include:  Start(src,dest,DataWindow,parm)  - begin execute a Data Pipeline, Cancel( ) - Halt execute of a Pipeline that is processing, Repair( ) - Process fixes to errors that may have occured during a execution.", 0, 0,"","", 1,"Data Pipeline","A new feature of PowerBuilder 5.0 is the ability to include Binary Large Object (BLOB) columns in a Data Pipeline.  This example will create a copy of the OLE table which includes a blob column.","Including Blob Columns in a Data Pipeline","w_pipeline_blob","5.0","This example demonstrates including a blob column in a Data Pipeline.  It also shows how to display an OLE 2.0 object in a DataWindow.", 0, 0,"macintoshsol2hpuxaix","", 1,"Data Pipeline","A new feature of PowerBuilder 5.0 is the ability to use a Stored Procedure as the source for a Data Pipeline.  This example will use a Data Pipeline to create and load a new table that includes all information about a Sales Order.","Stored Procedure Source Data Pipeline","w_pipeline_sp","5.0","This example demonstrates building a Data Pipeline from a Stored Procedure.", 0, 0,"","desktop", 1,"DataStores","This example implements a Windows 95 Explorer-style interface for data manipulation.  This consists of two controls (a TreeView and a ListView) linked together.","Data Explorer","w_data_explorer","5.0","This example demonstrates populating TreeView and ListView controls with data from DataStores.  It also shows how to link these two controls together using their standard events.", 0, 0,"","", 1,"DataStores","This example implements a Windows Program Manager-style interface for data manipulation.  This is an MDI application with a ListView control on each sheet.  It allows the user to ~"drill-down~" to the desired record.","Data Manager","w_data_manager_frame","5.0","This example demonstrated populating a ListView with data from a DataStore.  It also shows how to implement the basic ListView and MDI functionality.", 0, 0,"","", 1,"DataStores","This example shows a practical use of the ListView control.  It uses a ListView containg all the products which can be dragged and dropped onto a new order.","Sales Order ListView","w_add_sales_order","5.0","This example demonstrates populating a ListView with data from a DataStore.  It also shows how to implement drag and drop functionality and RMB support in a ListView.", 0, 0,"","", 1,"DataStores","This example shows how to use the PowerBuilder 5.0 DataStore to cache data for display in a DataWindow.","ShareData With DataStores","w_datastore_share","5.0","Four different DataStores are created and their data retrieved when the window is opened.  Then, whenever a radio button is clicked, ShareData() is used to share the data in the DataStore with the DataWindow.", 0, 0,"","", 1,"DataStores","This example uses a TreeView for data navigation and DataWindows to update the data.","TreeView / DataWindow Linking","w_tv_dw_link","5.0","This example demonstrates populating a TreeView with data from a DataStore and linking the levels of the TreeView to DataWindows.", 0, 0,"","", 1,"DataStores","Transfer employees from one department to another by dragging and dropping TreeView items","TreeView Drag/Drop","w_employee_xfer","5.0","This example demonstrates how to update a TreeView by dragging and dropping branches.", 0, 0,"","", 1,"DataWindows - Dynamic Creation","Build an SQL SELECT statement by selecting tables and columns.  Create a DataWindow from the SQL Select or the DW Sytnax.  Allows viewing and editing of both.","Create from SQL or DWSyntax","w_dw_from_select","2.0","Uses the PowerBuilder system tables to view the tables and columns available.

DWSyntaxFromSQL is used to create the DataWindow syntax based on a SQL select statement.

dwCreate is used to build an acutal DataWindow based on the Datawindow syntax.", 0, 0,"","", 1,"DataWindows - Dynamic Creation","Uses OpenUserObjectWithParm to create User Object CommandButtons to interact with a DataWindow control.  Buttons can created 'As Needed' by selecting the desired action from the menu, and then clicking on the window. The button is created and when clicked, performs the action that was passed to it when it was opened.","Dynamic User Objects","w_dynamic_uo_open_uo_frame","3.0","MDI, OpenUserObjectWithParm, Inheritance (menus), changing cursors.", 0, 0,"","", 1,"DataWindows - Dynamic Creation","An MDI application that uses a window based on the PowerBuilder Quick Select option in the DataWindow Painter.  After building the DataWindow it is displayed in an MDI sheet from where you may save the DataWindow into a PowerBuilder Library.","Runtime DataWindow Painter","w_mdi_quick_select","3.0","This example uses the SyntaxFromSQL function to dynamically build a DataWindow from an SQL Statement.  Once the DataWindow has been created, the Describe( ) function is used to display some of the attribute values of columns in the DataWindow.  The Modify( ) function is used to change the values of these attributes.  The Save Dialog uses the DirList( ) function to display the list of PBLs.  The LibraryImport( ) function is used to save the DataWindow.", 0, 0,"","", 1,"DataWindows - Events & Functions","Shows how to use attribute expressions for objects in a DataWindow.  The DataWindow is a listing of sales orders, with a retrieval argument of region.  Only rows with the region name specified can be modified.  Columns will have a white background if they can be modified, and a grey background if they are protected.  A picture of a disk will appear to the left of each row that will be updated in the database when the Update button is pressed.","Attribute Expressions","w_protected_columns","4.0","This example uses expressions for the protect, background color, and visible attributes.  The expressions for the column attributes reference the retrieval argument so that only rows with the region name specified in the retrieval argument can be modified.  The IsRowNew function is called in the attribute expressions to specify that columns on new rows can be modified.  The IsRowModified function is called from the visible attribute of the picture object to show a picture of the disk when a row has been modified.", 0, 0,"","", 1,"DataWindows - Events & Functions","This example lists all employees by department and shows which employees have the minimum and maximum salaries per department.","Computed Fields in Attribute Expr.","w_compute_in_attribute","4.0","An expression defined for the text color attribute of the Salary column references the Minimum and Maximum Salary computed fields in the group trailer band of the DataWindow.  If the value of the Salary column in the detail band is equal to one of the computed field values in the group trailer band, the text color changes to the appropriate value.  The only code that was necessary on the window for this example was to retrieve and update the DataWindow.", 0, 0,"","", 1,"DataWindows - Events & Functions","Highlights employees with salaries over $40,000, by conditionally displaying an indicator.","Conditional Bitmaps","w_high_low_salaries","2.0","Shows use of Bitmap() and If() functions in a DataWindow computed column.", 0, 0,"","", 0,"DataWindows - Events & Functions","This example shows different ways to copy data from one DataWindow to another.  It times each method so you can see the performance considerations of each.","Copy DataWindow","w_dw_copy","5.0","This example shows five different methods of copying data from one DataWindow to another:  GetItem/SetItem, copying data to the Clipboard and using ImportString, copying data into a structure array and back, direct assignment, and using RowsCopy.", 0, 0,"","", 1,"DataWindows - Events & Functions","A drag & drop example which will copy, move, or discard DataWindow rows from any of the buffers (primary, delete, filter).","Copy, Move, Discard Rows","w_dw_rows","4.0","Shows how to use dwRowsCopy, dwRowsMove, and dwRowsDiscard to copy rows, move rows, and discard rows from the DataWindow.  This example shows how to copy and move rows between different DataWindow buffers and controls as well as within the same DataWindow control.", 0, 0,"","", 1,"DataWindows - Events & Functions","In this example, the border and background color of the currently selected row are changed to visibly highlight the selected row.","CurrentRow Function","w_currentrow","5.0","This example uses the CurrentRow() DataWindow function in the border and background color attribute expressions of the columns to determine when that row is the current row.", 0, 0,"","", 1,"DataWindows - Events & Functions","This example shows the various DataWindow buffers, row and column statuses and the SQL generated by a DataWindow.","DataWindow Buffers","w_dwbuffers_frame","4.0","This example shows how to get the values of the various buffers of a DataWidow and how to get the row and column statuses.  It also demonstrates the use of the SQL Preview event.", 0, 0,"","", 1,"DataWindows - Events & Functions","This example demonstrates the use of the following DataWindow expressions which are new for 5.0:  LIKE, IN, BETWEEN, RGB, and CASE.","DataWindow Expressions","w_dw_expressions","5.0","The example shows using these expressions in the text.color attributes of the various DataWindow column objects.  The color will be set based on values entered by the users.", 0, 0,"","", 1,"DataWindows - Events & Functions","Shows how to restore a DataWindow column's data to the original value that was retrieved from the database, reset a DataWindows update flags, and select the modified rows in a DataWindow.  Common DataWindow functions to retrieve, update, delete and insert rows are demonstrated.  Also shows the row count of displayed rows, modified rows, and deleted rows in the DataWindow.","DataWindow Functions","w_dw_functions","2.0","GetItemString with the original value argument set to true and SetItem functions are used to restore a column's data back to its original value.  ResetUpdate( ) is used to reset the update flags on the DataWindow.  GetNextModified( ) is used to find all the rows in the DataWindow that have been modified.", 0, 0,"","", 1,"DataWindows - Events & Functions","Utility to create a structure or Autoinstantiate Custom Class NVO that matches a DataWindow.  This allows data to be copied to and from the DataWindow using the DataWindow direct object reference syntax.","DataWindow to Structure Utility","w_dwtostr","5.0","The exported syntax for either a structure or Autoinstantiate Custom Class NVO will be generated and can be saved to a file.  The object can then be created by importing the file.", 0, 0,"","", 1,"DataWindows - Events & Functions","Example of how to call a PowerScript function from the validation rule in a DataWindow.","DataWindow Validation Rules","w_powerscript_in_validation","6.0","Validating a field in a DataWindow is very easy using the validation selection for a DataWindow field.  When the validation rule becomes complex or requires additional functions such as sql calls to a database, you can use a function written in the function painter.  The dept field in this example uses a global function as an example of this.  In this example, after the department is entered, the function does a look up in the department table to ensure that it is a valid department.

This example also uses the PB 6.0 DataWindow GroupBox.", 0, 1,"","", 1,"DataWindows - Events & Functions","This example shows how to override the default behavior of the dberror event, and provide custom database error messages.  The techniques used in the example can be extended to provide error handling based on the specific database error code encountered.","DBError Event","w_dberror_event","3.0","By setting the ActionCode to 1 in the dberror event of the DataWindow, the default ''DataWindow Error'' dialogue is not displayed.  The DBErrorCode( ) and DBErrorMessage( ) functions may be used to display the specific database error code and message generated by a database error in the DataWindow.", 0, 0,"","", 1,"DataWindows - Events & Functions","A digital clock, built using DataWindow computed fields with Now & Today functions and the DataWindow timer interval.","Digital Clock","w_clock_using_dw","2.0","Using the DataWindow's timer interval along with computed functions Now / Today within a DataWindow, a clock/calendar is produced.", 0, 0,"","", 0,"DataWindows - Events & Functions","Demonstrates various techniques that may be used with DropDownDataWindows.  Techniques shown include obtaining a reference to a DDDW, explicitly retrieving a DDDW, suppressing the retrieval arguments dialogue for a DDDW, changing the dataobject of a DDDW, and sorting and filtering a DDDW.","DropDownDataWindow Techniques","w_dddw_techniques","3.0","The GetChild( ) function is used to obtain a reference to a DropDownDataWindow.  Once a reference to the DDDW has been obtained, Powerscript functions such as SetTransObject( ), Retrieve( ), SetSort( ), and SetFilter( ) may all be performed on the DDDW.  Changing the dataobject of a DDDW involves performing a Modify( ) on its parent DataWindow, and obtaining a new reference to the DDDW, via GetChild( ).  In order to suppress the retrieval arguments dialogue for a DDDW, the DDDW must contain data before its parent DataWindow is retrieved.  This can be done either by explicitly retrieving the DDDW or inserting a new row into the DDDW before performing Retrieve( ) on the parent DataWindow.", 0, 0,"","", 1,"DataWindows - Events & Functions","Crosstab with multiple rows, columns, values.  The crosstab presentation style for a DataWindow uses the information specified in the Crosstab Definition window to create a cross tabulation table. The crosstab table uses data from the database but does not change it.  It just tabulates the data, analyzes it, and displays the results.  Once the default crosstab is displayed, the columns and rows may be changed using the Change Crosstab Button.","Enhanced Crosstab Reporting","w_crosstab","4.0","Uses the Crosstabdialog( ) function.  Also uses the GetMessage( ) function to retrieve the status from the DataWindow.", 0, 0,"","", 1,"DataWindows - Events & Functions","Using the evaluate function with the ItemError Event of the Datawindow, a mathematical expression can be typed in the salary field.  When you move to the next field, the expression will be evaluated.","Evaluate / ItemError","w_evaluate","3.0","Uses Describe(~"evaluate.....~") to evaluate the mathematical expression in the field.  The evaluate function will be called in the ItemError Event of the DataWindow. This is because when a string, the expression, is typed in the numeric field, this will trigger the ItemError event.  Once in the ItemError event, a return code is used to let the DataWindow know how to proceed.  Note: The field also contains a validation rule that forces the salary to be greater than zero. If a math expression is entered, the DataWindow field validation is still executed after the math expression is evaluated.  This is accomplished by placing the evaluated expression result using SetText() in the post event of the ItemError.", 0, 0,"","", 1,"DataWindows - Events & Functions","Window contains DataWindow of employees, with subsidiary DataWindows that show three different graphical views of the employee data.","Graphs & Shared DataWindows","w_shared_dw_graph","3.0","The employee data is only retrieved once from the database. Using a technique called shared DataWindows, the other DataWindows (displayed as graphs), use a common (shared) data source.  Notice: Any changes made to the primary Datawindow will be reflected appropriately by the shared graph datawindows.  
Nested functions within the graphs definition are used here to pre-work the data being displayed.  In this case, the salary pie chart and average age by department graphs exclude any terminated employees. To see these functions, view the ~"Data~" definition for the graphs.", 0, 0,"","", 1,"DataWindows - Events & Functions","A DataWindow with the split horizontal scrolling style set on.  Allows for synchronized vertical scrolling while fixing one or more columns. ","Horizontal Split Scroll","w_split_hscroll","3.0","The open event script sets the initial location of the split using the Describe & Modify functions.  This is the preferred technique to the old example, called 'Synchronized Vertical Scrolling'.

Uses Modify to set the HorizontalScrollSplit attibute to the x position of the first column.", 0, 0,"","", 0,"DataWindows - Events & Functions","Using a technique with Describe and ImportString, data is stored in a string and used to ~"Undo All Changes.~" The RowsCopy function allows you to copy data from one DataWindow to another.","ImportString() & RowsCopy()","w_datawindow_copy","3.0","The data portion of a DataWindow can be extracted into a string using Describe(~"datawindow.data~").  The string can be placed back into the same DataWindow, or another DataWindow of the same format using the ImportString() function.  By using these two functions together, data can stored in a string, and then reloaded into  DataWindows.", 0, 0,"","", 1,"DataWindows - Events & Functions","This example visually shows the item statuses for columns and rows in a DataWindow, and how they affect the SQL syntax generated by the Update function.","Item Status & Updating","w_item_status","3.0","The GetItemStatus and SetItemStatus functions are used extensively in this example to obtain and set the item statuses for rows and columns in the DataWindow.  The GetSQLPreview function is used in the sqlpreview event of the DataWindow to show the SQL syntax that is generated by the Update function.  A computed field on the DataWindow is used to show the row status for each row.  The computed field has  an expression specified for the text color attribute to change the color based on the value of the field.", 0, 0,"","", 1,"DataWindows - Events & Functions","Shows how to use the Large and Small DataWindow functions to determine ranking position of information in a DataWindow.","Large & Small Functions","w_large_small","4.0","Using DataWindow functions in computed columns in a DataWindow.", 0, 0,"","", 0,"DataWindows - Events & Functions","This is an example of a mail merge form letter using a Rich Text Edit (RTE) style DataWindow.","Mail Merge with RTE-Style DataWindow","w_rte_mail_merge","5.0","This example demonstrates the use of the RTE style DataWindow.", 0, 0,"","", 1,"DataWindows - Events & Functions","DataWindow that use the new Mode and Median aggregate functions. It also shows how to set a DataWindow's Object attributes with an expression.

The mode and median functions are used to display information about the customer orders.","Mode & Median Functions","w_mode_median","4.0","Two new report aggregate functions are added with 4.0:
Mode() -obtains the value that occurs most frequently in a series of numbers.
Median() -obtains the value in a series of numbers for which below and above there are an equal number of values.

The greenbar produced in this example is defined in the DataWindow object's attribute dialog box (RMB on the gray rectangle in the detail band to see this. Expressions that Modify DataWindow objects' attributes can now be set in the development evironment in this dialog box eliminating the need to do the Modify at runtime).", 0, 0,"","", 0,"DataWindows - Events & Functions","This example is a simple DataWindow report.  The toolbar at the top of the window is made of DataWindow buttons in the Header band.  All processing for the DataWindow functions is built into the DataWindow buttons.  The only code in the Window is to retrieve the DataWindow and close the window.","Reporting With DataWindow Buttons","w_button_report","6.0","This example demonstrates the use of the PowerBuilder 6.0 DataWindow buttons.  There are two user defined buttons used that trigger the buttonclicked event of the DataWindow control.  The script then determines which button was clicked to either close the window or open help.  All other buttons execute predefined DataWindow functions.", 1, 0,"","", 1,"DataWindows - Events & Functions","Shows the various modes of highlighting the current row in a DataWindow using the SetRowFocusIndicator function.","Row Focus Indicators","w_setrowfocus","2.0","The row focus has four possible states:
None.
Rect. - a rectangle around the row that has focus
Hand - a built-in hand indicator that points to the current row
Picture - a picture file
", 0, 0,"","", 0,"DataWindows - Events & Functions","This example shows how to highlight rows in a DataWindow by pressing either the Shift or Control key in conjunction with clicking the Mouse. ","Row Selection Techniques","w_highlight_dw_rows","3.0","By trapping the keys in the DataWindow clicked event, user written functions can duplicate the multiple selection row techniques as in File Manager.", 0, 0,"","", 1,"DataWindows - Events & Functions","This is a Master/Detail Sales Order update screen that allows add/update/delete on multiple rows of the detail DataWindow simultaneously.  It uses the PowerBuilder 6.0 RowFocusChanging event to validate the data entered and prevent the user from going to another row if the data is invalid.","RowFocusChanging","w_update_sales_order","6.0","Demonstrates the use of the RowFocusChanging event to prevent the user from changing rows if data fails validation.", 1, 0,null null  1,"DataWindows - Events & Functions","Window contains basic employee DataWindow, with subsidiary DataWindows on the pages of a Tab control for less often used information and address.","Share DataWindow buffers","w_empl_dw_share_buffers","6.0","Three updateable DataWindows are sharing one primary data source using the ShareData function.  Any retrieves made to the primary DataWindow update the secondary DataWindows.  Also, any updates to secondary DataWindows update the primary DataWindow store.

Another technique shown is using a Tab control to reduce the clutter of the screen with data/options that are not normally used.

This example also uses the PB 6.0 DataWindow GroupBox.
", 0, 1,"","", 1,"DataWindows - Events & Functions","This example shows a technique that may be used to share data between DataWindows and DropDownDataWindows.  This technique is especially useful when large code tables are being implemented as DropDownDataWindows, and are being re-retrieved often.","Sharing DropDownDataWindows","w_shared_dddw","3.0","The GetChild( ) function is used to obtain references to the three DropDownDataWindows used in this example.  Once the references to the DropDownDataWindows are obtained, the ShareData( ) function is used to share data between the primary DataWindows (on the minimized window) and the DropDownDataWindows.  Sharing is turned off with the ShareDataOff( ) function.", 0, 0,"","", 1,"DataWindows - Events & Functions","Two related DataWindows allow the first two columns to be ~"locked in~" while remaining columns scroll horizontally.  ","Synchronized Vertical Scrolling","w_scroll_2_datawindows","2.0","Vertical scrolling of both DataWindows is synchronized by using scroll vertical event and the ScrollVerticalPostion attribute from the DataWindow. This gives the appearance of a single presentation, with a fixed ~"legend~" and many data columns.  
To achieve this same effect when using a single datawindow, see the DataWindow ~"horizontal split - scrolling~" example. ", 0, 0,"","", 0,"DataWindows - Events & Functions","This example is a simple add/update/delete maintenance window for the contact table.  But all the processing for the DataWindow functions is built into the DataWindow buttons.  The only code in the Window is to retrieve the DataWindow and close the window.","Table Maintenance With DataWindow Buttons","w_contact_maintenance","6.0","This example demonstrates the use of the PowerBuilder 6.0 DataWindow buttons.  There are several types of buttons, those used add a row, delete a row, perform an update and scroll to the first, last, next and previous rows.  There are also two user defined buttons that trigger the buttonclicked event of the DataWindow control.  The script then determines which button was clicked to either close the window or open help.", 1, 0,"","", 1,"DataWindows - Events & Functions","An example of using the RowsMove function to undelete rows from a DataWindow.","Undeleting a Row","w_undelete_row","4.0","The RowsMove function is used to move rows from the deleted buffer to the primary buffer of the DataWindow.  This example only allows the last row that was deleted from the DataWindow to be undeleted.   When UnDelete Row is performed, the last row in the delete buffer is moved back to the primary buffer to its original position in the DataWindow.", 0, 0,"","", 1,"DataWindows - Retrieval","Shows how to cancel DataWindow retrieval and printing while they are in progress.","Cancel Retrieval & Printing","w_cancel_retrieval","2.0","The RetrieveStart, RetrieveRow, and RetrieveEnd events in the DataWindow are used to monitor a cancel retrieve request from the user.  The PrintDataWindow function has an optional parameter to specify whether the cancel dialog is to be displayed or not.", 0, 0,"","", 1,"DataWindows - Retrieval","Shows the different ways to connect a DataWindow to the database. Compares the use of SetTrans vs. SetTransObject.","Database Connection ","w_connect_db","2.0","SetTrans and SetTransObject are used to connect the internal transaction object for the DataWindow. SetTransObject will allow programmer specified transaction functions to be used (Commit/Rollback). SetTrans do these automatically. ", 0, 0,"","", 1,"DataWindows - Retrieval","Retrieves & prints a report of employees within department with control breaks and subtotals, and statistics of salary by department.  The report can be printed or saved as a file.  Example of how to use the Printer Setup dialog.","Grouping & Computed Columns","w_print_employee_roster_dw","4.0","Shows the use of the DataWindow Print function. Uses computed functions within the DataWindow to get average, max, min salary.  A group sort on department name is specified for the DataWindow (4.0 feature).  The new 4.0 SaveAs dialogue shows the two new file types that a DataWindow can be save as:  Report (saves the DataWindow/Report and its data as a PSR file) or WMF (saves the report or rows in the DataWindow/Report as a metafile)", 0, 0,"","", 0,"DataWindows - Retrieval","This window contains all label types that are available in the DataWindow Label presentation style. The display is configurable by changing the type of label.","Labels","w_labels","3.0","Reads all valid labels from the pb label ini file. This routine is contained in a window function.  Every time a label type is changed, the attributes for that label are read in from the ini file and changed using the Modify function.  The display of a label DataWindow appears in a print preview mode. By changing the print preview zoom attribute with Modify(), the display zoom level can be changed.", 0, 0,"","", 0,"DataWindows - Retrieval","DataWindow that use the new Mode and Median aggregate functions. It also shows how to set a DataWindow's Object attributes with an expression.

The mode and median functions are used to display information about the customer orders.","Mode & Median Functions","w_mode_median","4.0","Two new report aggregate functions are added with 4.0:
Mode() -obtains the value that occurs most frequently in a series of numbers.
Median() -obtains the value in a series of numbers for which below and above there are an equal number of values.

The greenbar produced in this example is defined in the DataWindow object's attribute dialog box (RMB on the gray rectangle in the detail band to see this. Expressions that Modify DataWindow objects' attributes can now be set in the development evironment in this dialog box eliminating the need to do the Modify at runtime).", 0, 0,"","", 0,"DataWindows - Retrieval","This window contains a DataWindow that shows two records of data on a single row in the DataWindow; data is from the employee table.  Also see the ~"Newspaper and Sliding Columns~" example for a similar report format.","N-Up DataWindow","w_n_up","3.0","Example of the N-UP type DataWindow.  Good for building multicolumn reports.", 0, 0,"","", 0,"DataWindows - Retrieval","An MDI example which allows various nested reports to be opened for display or printing.  The various reports show examples of nesting reports within DataWindows, and using the Composite Presentation Style for DataWindows.","Nested Reports","w_nested_frame","4.0","This example shows how to nest reports within a DataWindow and define retrieval arguments and criteria for the nested reports.  It also shows the new Composite Presentation Style for DataWindows.
", 0, 0,"","", 1,"DataWindows - Retrieval","The Newspaper columns attribute is set in the Print Specifications of the DataWindow Painter.  The sliding columns is set as an attribute (~"Slide Left~") in the DataWindow Painter.  Also, see the N-Up  example for a similar report format.","Newspaper and Sliding Columns","w_newspaper_slide_columns","4.0","An alphabetical listing of customers in the database in a ~"phone-book~" format.  Notice the three columns of data. The names are in order by column.  When the bottom of the page is reached, the list continues on the next column (this is the column newspaper attribute).  The first names will slide towards the last names.  The last name and first name are not in one field.  The first name is a sliding column.
", 0, 0,"","", 1,"DataWindows - Retrieval","This example shows seven presentation styles of a DataWindow using the same query for each result set.","Presentation Styles","w_datawindow_style_frame","3.0","Each sheet in the MDI frame contains a different presentation style. Each sheet is a different instance of the same window.  The DataWindow Object is changed as each window sheet opens.  Only one DataWindow actually retrieves data and the other DataWindows share data using the Share function.  (The execption is the crosstab DataWindow which cannot share data).", 0, 0,"","", 1,"DataWindows - Retrieval","DataWindows (source, object and data) can be saved to a file with extension ~".PSR~".  PSR files can be viewed from the runtime and development environments. They may also be viewed from the File Manager once the association is setup properly.  This window allows a user to select PSR files from a directory, and view them on the screen.  Connection to a database is not needed since the data is stored with the objects in the file.

In PowerBuilder 5.0 Composite and Nested Report DataWindows can now also be saved as PSR files.  The examples directory also includes one PSR of each of these types (comprep.psr and nestrep.psr).","PSR (Report File) Viewer","w_psr_viewer","5.0","The PSR file is assigned to the dataobject attribute of the DataWindow.  In this example, after the data has been loaded, the DataWindow and Window sizes are changed to match the size of the DataWindow's contents as closely as possible.", 0, 0,"macintosh","", 1,"DataWindows - Retrieval","Example of how to set the DataWindow into query mode and retrieve.","Query Mode","w_dw_criteria","3.0","Using Modify to set the DataWindow attribute QueryMode to 'Yes' wil change the DataWindow to a Query By Example type setup.", 0, 0,"","", 1,"DataWindows - Retrieval","DataWindow that is a report of departments and employees.  Computed fields that reference other computed fields are used to display each employee's salary deviation from the average salary for the department they work in; and summary statistics on the amount of experience for each department.","Referencing Computed Fields","w_computed_reference","4.0","Shows how to reference and use computed fields in the expressions of other computed fields.", 0, 0,"","", 0,"DataWindows - Retrieval","This example displays a nested report of all employees and their salaries for each department.  You are allowed to enter raise percentages for employees above and below the department average and see the results, including new total salaries for each department.","Referencing Nested Reports","w_nested_reference","5.0","This example shows how to directly reference columns and their data in a nested or composite report.", 0, 0,"","", 1,"DataWindows - Retrieval","Retrieval arguments for a DataWindow are entered by the user.  When the DataWindow is retrieved, it displays the report with the retrieval arguments listed in the footer of the report.","Referencing Retrieval Arguments","w_show_retrieve_arg","4.0","Shows how computed fields in a DataWindow can be used to reference the DataWindow's retrieval arguments.  GetData(), the new 4.0 PowerScript function for edit masks, is used to get the starting and ending date retrieval arguments for the DataWindow.", 0, 0,"","", 0,"DataWindows - Retrieval","This example shows a technique that can be used to perform aggregate functions along with Retrieve as Needed on a DataWindow.  It also compares the retrieval times of the same query on two DataWindows with / without Retrieve as Needed.","Retrieve as Needed & Aggregates","w_retrieve_asneeded","3.0","Normally on a DataWindow with Retrieve as Needed, any aggregate functions that are used will override the Retrieve as Needed functionality.  The technique used in this example uses embedded SQL to first retrieve the aggregate values required, and then issues a dwModify on a text object in the DataWindow, so that the aggregate value can be displayed.", 0, 0,"","", 1,"DataWindows - Runtime Modification","This example shows how to use the 5.0 DataWindow direct object reference syntax instead of GetItem/SetItem and Modify/Describe to change the salary of employees that match certain criteria.","Change Employee Salary","w_salary_admin","5.0","This example uses direct object reference syntax instead of Describe to determine which rows should be changed based on the criteria enterd.  The ~"Highlight Employees to Change~" button shows how to use direct references to objects in the DataWindow instead of Modify to change the attributes of the objects to indicate which rows match the criteria.  The ~"Calculate Employee Salaries~" button shows how to set values in the DataWindow without using SetItem.", 0, 0,"","", 1,"DataWindows - Runtime Modification","This example shows different ways to copy data from one DataWindow to another.  It times each method so you can see the performance considerations of each.","Copy DataWindow","w_dw_copy","5.0","This example shows five different methods of copying data from one DataWindow to another:  GetItem/SetItem, copying data to the Clipboard and using ImportString, copying data into a structure array and back, direct assignment, and using RowsCopy.", 0, 0,"","", 1,"DataWindows - Runtime Modification","This example demonstrates the use of the following DataWindow expressions which are new for 5.0:  LIKE, IN, BETWEEN, RGB, and CASE.","DataWindow Expressions","w_dw_expressions","5.0","The example shows using these expressions in the text.color attributes of the various DataWindow column objects.  The color will be set based on values entered by the users.", 0, 0,"","", 1,"DataWindows - Runtime Modification","Shows the effects of changing attributes of date and numeric spin controls.  User is able to change the edit mask, associate a code table with spin control, and change the spin increment, spin range minimum, and spin range maximum values.","DataWindow Spin Controls","w_spin_controls","3.0","Modify() and Describe() are used to change all of the spin column's attributes.  This example also demonstrates how to dynamically populate a DropDownListBox column on a DataWindow.", 0, 0,"","", 1,"DataWindows - Runtime Modification","This example shows a graph of Revenues per Year.  Clicking a button will add a series to the graph showing Revenues per Quarter.","Dynamically Adding a Series to a Graph","w_graph_dynamic_series","4.0","This example uses the DataWindow Modify() function to add a series to, and remove it from, a graph.", 0, 0,"","", 1,"DataWindows - Runtime Modification","Using the evaluate function with the ItemError Event of the Datawindow, a mathematical expression can be typed in the salary field.  When you move to the next field, the expression will be evaluated.","Evaluate / ItemError","w_evaluate","3.0","Uses Describe(~"evaluate.....~") to evaluate the mathematical expression in the field.  The evaluate function will be called in the ItemError Event of the DataWindow. This is because when a string, the expression, is typed in the numeric field, this will trigger the ItemError event.  Once in the ItemError event, a return code is used to let the DataWindow know how to proceed.  Note: The field also contains a validation rule that forces the salary to be greater than zero. If a math expression is entered, the DataWindow field validation is still executed after the math expression is evaluated.  This is accomplished by placing the evaluated expression result using SetText() in the post event of the ItemError.", 0, 0,"","", 1,"DataWindows - Runtime Modification","Using a technique with Describe and ImportString, data is stored in a string and used to ~"Undo All Changes.~" The RowsCopy function allows you to copy data from one DataWindow to another.","ImportString() & RowsCopy()","w_datawindow_copy","3.0","The data portion of a DataWindow can be extracted into a string using Describe(~"datawindow.data~").  The string can be placed back into the same DataWindow, or another DataWindow of the same format using the ImportString() function.  By using these two functions together, data can stored in a string, and then reloaded into  DataWindows.", 0, 0,"","", 1,"DataWindows - Runtime Modification","Modify a DataWindow by changing object attributes at runtime.  Shows the use of the Modify and Describe functions and the PowerBuilder 5.0 DataWindow direct object reference syntax.","Modify a DataWindow","w_customize_dw","5.0","The example consists of two tabs on a Tab control.  The first tab demonstrates the use of Modify and Describe to change the DataWindow object attributes.  Describe is used to obtain the names of all of the objects in the DataWindow.  The ListBoxes are then populated with the DataWindow objects using the AddItem function.  When an object is selected, Describe is called to obtain the type of object selected.  The attributes ListBox is filled with appropriate attributes for object type.  The Modify syntax is built as objects and attributes are selected.

The second tab shows using direct object reference syntax to change selected attributes of two of the objects.", 0, 0,"","", 1,"DataWindows - Runtime Modification","An MDI application that uses a window based on the PowerBuilder Quick Select option in the DataWindow Painter.  After building the DataWindow it is displayed in an MDI sheet from where you may save the DataWindow into a PowerBuilder Library.","Runtime DataWindow Painter","w_mdi_quick_select","3.0","This example uses the SyntaxFromSQL function to dynamically build a DataWindow from an SQL Statement.  Once the DataWindow has been created, the Describe( ) function is used to display some of the attribute values of columns in the DataWindow.  The Modify( ) function is used to change the values of these attributes.  The Save Dialog uses the DirList( ) function to display the list of PBLs.  The LibraryImport( ) function is used to save the DataWindow.", 0, 0,"","", 1,"DataWindows - Runtime Modification","Shows a variety of DataWindow functions including: SetSort & Sort; SetFilter & Filter; Update, Retrieve; InsertRow, DeleteRow; Print. ","Sort & Filter","w_sort_and_filter","2.0","The DropDownListBoxes across the top contain the column names from the current DataWindow.  The column names are dynamically loaded by parsing through the syntax returned by the Describe function.  When choosing a filter, only unique data is loaded on the right side of the operator.", 0, 0,"","", 1,"DataWindows - Updating","This example shows how to restrict modifications to a DataWindow so that it only allows new rows to be added, and disallows any changes to the original data.","Add-Only DataWindow","w_entry_only","4.0","With PowerBuilder 4.0, the protect attribute for a DataWindow column can be set on or off based on the expression that is specified for the column.  (To specify an expression for the protect attribute, click the right mouse button on a column in the DataWindow Painter and then choose 'Attributes').  This example uses the IsRowNew( ) function in the expression for the protect attribute of all columns in the DataWindow.  If the row in the DataWindow is new, the protect attribute for all columns will be 0 (off); if not, it will be 1 (on).  The expression for the background color of the columns is done similarly.", 0, 0,"","", 0,"DataWindows - Updating","This is a simple add/update/delete window to maintain data in a table used to track calls.  It is intended to highlight the use of Auto Increment.","Auto Increment - Call Track","w_call_track","4.0","The id column of the call_track table is set to have a default of AutoIncrement.  This allows the database to automatically increment the number whenever a new row is added.  There is no need for PowerScript code to determine the call id.", 0, 0,"","", 1,"DataWindows - Updating","Shows the stages of acceptance of data in a DataWindow column from the text edit box to the underlying item.
","Column Text Value vs. Item Value","w_dw_items","2.0","Programatically calling the AcceptText and GetText functions.
", 0, 0,"","", 1,"DataWindows - Updating","Shows how to restore a DataWindow column's data to the original value that was retrieved from the database, reset a DataWindows update flags, and select the modified rows in a DataWindow.  Common DataWindow functions to retrieve, update, delete and insert rows are demonstrated.  Also shows the row count of displayed rows, modified rows, and deleted rows in the DataWindow.","DataWindow Functions","w_dw_functions","2.0","GetItemString with the original value argument set to true and SetItem functions are used to restore a column's data back to its original value.  ResetUpdate( ) is used to reset the update flags on the DataWindow.  GetNextModified( ) is used to find all the rows in the DataWindow that have been modified.", 0, 0,"","", 1,"DataWindows - Updating","This example shows how to override the default behavior of the dberror event, and provide custom database error messages.  The techniques used in the example can be extended to provide error handling based on the specific database error code encountered.","DBError Event","w_dberror_event","3.0","By setting the ActionCode to 1 in the dberror event of the DataWindow, the default ''DataWindow Error'' dialogue is not displayed.  The DBErrorCode( ) and DBErrorMessage( ) functions may be used to display the specific database error code and message generated by a database error in the DataWindow.", 0, 0,"","", 1,"DataWindows - Updating","Demonstrates various techniques that may be used with DropDownDataWindows.  Techniques shown include obtaining a reference to a DDDW, explicitly retrieving a DDDW, suppressing the retrieval arguments dialogue for a DDDW, changing the dataobject of a DDDW, and sorting and filtering a DDDW.","DropDownDataWindow Techniques","w_dddw_techniques","3.0","The GetChild( ) function is used to obtain a reference to a DropDownDataWindow.  Once a reference to the DDDW has been obtained, Powerscript functions such as SetTransObject( ), Retrieve( ), SetSort( ), and SetFilter( ) may all be performed on the DDDW.  Changing the dataobject of a DDDW involves performing a Modify( ) on its parent DataWindow, and obtaining a new reference to the DDDW, via GetChild( ).  In order to suppress the retrieval arguments dialogue for a DDDW, the DDDW must contain data before its parent DataWindow is retrieved.  This can be done either by explicitly retrieving the DDDW or inserting a new row into the DDDW before performing Retrieve( ) on the parent DataWindow.", 0, 0,"","", 1,"DataWindows - Updating","This example visually shows the item statuses for columns and rows in a DataWindow, and how they affect the SQL syntax generated by the Update function.","Item Status & Updating","w_item_status","3.0","The GetItemStatus and SetItemStatus functions are used extensively in this example to obtain and set the item statuses for rows and columns in the DataWindow.  The GetSQLPreview function is used in the sqlpreview event of the DataWindow to show the SQL syntax that is generated by the Update function.  A computed field on the DataWindow is used to show the row status for each row.  The computed field has  an expression specified for the text color attribute to change the color based on the value of the field.", 0, 0,"","", 1,"DataWindows - Updating","DataWindow's source is two different tables.  User can update fields from either or both tables from within the DataWindow.","Multiple Table Update Single DW","w_mult_tab_update","3.0","The primary table is update first.  Then, using Modify( ), the updatable columns, and key columns are switched for the DataWindow.  The Update( ) function is run again with the new settings.", 0, 0,"","", 0,"DataWindows - Updating","Window contains basic employee DataWindow, with subsidiary DataWindows on the pages of a Tab control for less often used information and address.","Share DataWindow buffers","w_empl_dw_share_buffers","6.0","Three updateable DataWindows are sharing one primary data source using the ShareData function.  Any retrieves made to the primary DataWindow update the secondary DataWindows.  Also, any updates to secondary DataWindows update the primary DataWindow store.

Another technique shown is using a Tab control to reduce the clutter of the screen with data/options that are not normally used.

This example also uses the PB 6.0 DataWindow GroupBox.
", 0, 1,"","", 1,"DataWindows - Updating","An example of using the RowsMove function to undelete rows from a DataWindow.","Undeleting a Row","w_undelete_row","4.0","The RowsMove function is used to move rows from the deleted buffer to the primary buffer of the DataWindow.  This example only allows the last row that was deleted from the DataWindow to be undeleted.   When UnDelete Row is performed, the last row in the delete buffer is moved back to the primary buffer to its original position in the DataWindow.", 0, 0,"","", 1,"Drag & Drop","Select a department and employee by dragging the employee onto an employee details section.  Change the status of the employee by dragging the employee onto different status pictures.","Change Employee Status","w_change_emp_status","3.0","This example uses the Drag and and DraggedObject functions, and the dragdrop event to drag employees onto specific actions.  The dragenter and dragleave events are used to display help messages at the bottom of the window.  This is also a good example of using the mousemove event with the GetObjectAtPointer function.", 0, 0,"","", 0,"Drag & Drop","Within a Multiple Document Interface (MDI) frame window, open one or more instances of three different report windows (MDI sheets).  Drag Department Name onto any report window to see the report for that department.  ","Department Reports","w_mdi_main","2.0","Shows how to drag objects from one window to another and use the dragdrop event to determine the type of object that was dropped.  It also uses the message object to pass information between windows.", 0, 0,"","", 1,"Drag & Drop","The PowerBuilder Jigsaw Puzzle.  Scramble the PowerBuilder logo and put it back together.","PowerPuzzle","w_puzzle","5.0","This example demonstrates the use of standard user objects and drag and drop.", 0, 0,"","", 1,"Drag & Drop","Transfer employees from one department to another by dragging and dropping TreeView items","TreeView Drag/Drop","w_employee_xfer","5.0","This example demonstrates how to update a TreeView by dragging and dropping branches.", 0, 0,"","", 1,"Functions - External","Display system information including Windows directory; free memory; GDI, System, User resources available, and user id.","System Information","w_about_system","3.0","Shows how to declare external functions and then call them within a script.", 0, 0,"macintosh","", 0,"Functions - External","Demonstrates the use of Windows SDK functions. Functions are declared as external functions and become simple extensions to the language. Also uses the Handle function to get internal window handles needed by Windows SDK functions.","Windows SDK Functions","w_sdk_functions","2.0","Declaring and calling local external functions.  The available drives are determined by using the PowerBuilder DirList function.", 0, 0,"macintosh","", 0,"Functions - External","Select program names and either run them from you PowerBuilder app, or test to see if they are running.","Working with Executables","w_file_functions","3.0","Using the PowerBuilder Run function, programs outside of Powerbuilder may be executed.  Using Windows API functions, tests can be made as to whether a program is already running, and how many instances of it are running.  An example of how this can be helpful is if you only want one of your applications running at a time, you can place this test in the open event of the application.", 0, 0,"macintoshsol2hpuxaix","", 1,"Functions - PowerScript","Uses the CPU function to compute elapsed time for a user-entered number of loop iterations.","CPU & Yield","w_cpu","2.0","CPU() will return elapsed time since the start of the program.  The time is kept in microseconds. By comparing  difference in beginning and ending times, performance can be measured within 1000's of a second.  The Yield() function is used to allow other windows events to take place. Once an event is running, it will utilize the CPU until it completes. The For loop in the clicked event of the Start button will lock the CPU until it completes. Because this can be set to be a large loop, the windows session may appear to be ~"locked~".  By yielding within an intensive loop process, other events (such as the Clicked event for Stop), can take place.", 0, 0,"","", 0,"Functions - PowerScript","Demonstrates user-defined date functions and many of the PowerBuilder date functions.","Date Functions","w_date_functions","2.0","PowerBuilder date functions DayNumber, DayName, RelativeDate, and DaysAfter functions are used.  User-defined function f_check_date determines whether a date/day name combination are valid.  f_closest_date determines what the closest day name is to the date specified.", 0, 0,"","", 1,"Functions - PowerScript","Simple animation example of a train crossing the window. ","Draw - Train","w_train","2.0","It illustrates the Timer function and event.  By swapping out a picture at timed intervals, the effect of animation can be achieved.", 0, 0,"","", 0,"Functions - PowerScript","At runtime determine the following :
   Operating system and it's revision
   CPU Type
   Powerbuilder version
   Number of colors
   Screen width and height","GetEnvironment Function","w_getenvironment","4.0","Uses the GetEnvironment function, which populates a structure variable of the type environment.", 0, 0,"","", 0,"Functions - PowerScript","This example demonstrates the use of metaclass functions to determine whether a function exists on a control before it is called.  The example contains several controls on a window, some of which have the cut, copy, and paste functions implemented.  When one of those options is selected from the menu, it determines whether or not to call the function based on the current control's class definition.","Metaclass Functionality","w_cut_copy_paste","6.0","The metaclass functions FindClassDefinition and FindMatchingFunction are used to get the class definition of the current control and then determine whether it has implemented the desired function.", 1, 0,null null  1,"Functions - PowerScript","This example demonstrates the use of the PopulateError function to populate the error object.  It asks the user to enter some values, validates them, and populates the error object with any error message.  It then uses the SignalError function to trigger the SystemError event to display the message.","PopulateError Function","w_populateerror","6.0","The PopulateError function sets the error number and error message text properties of the error object.  The SignalError function can then be used to trigger the SystemError event.  You must have code in the SystemError event to process the error.  The Code Examples SystemError event opens a window that displays the properties of the error object.  It includes buttons to exit the application or continue.", 1, 0,null null  1,"Functions - PowerScript","This is the PowerBuilder aquarium.","PowerBuilder  Aquarium","w_fish","5.0","It illustrates using the Timer and Draw functions to move the fish around.  It also shows how to use overlay pictures in a ListView", 0, 0,"","", 0,"Functions - PowerScript","Print individual objects displayed on the screen to a printed copy.  Print the entire screen with adjustable scaling.  The user can adjust the width and height using the edit mask dimensions.","Print Object and Print Screen","w_print_examples","4.0","The objects on the screen are dynamically loaded into the listbox.  The user chooses which objects they want printed and each one is printed in a print job using the Object.Print( ) function.

The PrintScreen( ) function takes the entire screen and prints it to a print job. ", 0, 0,"","", 1,"Functions - PowerScript","Retrieves employees and prints a report of employees within department with control breaks and subtotals of salary by department. The printed report formatting and group breaks are handled totally by PowerBuilder scripts.","Printing DataWindows From Script","w_print_employee_roster","2.0","Shows the use of various Print functions.  The script for the Print button manually prints each line from the DataWindow.  The breaks that occur on the printed page must be programmed into the script.  A simpler approach is shown in the Emplyee Report in the DataWindow category, which uses DataWindow control breaks and the DataWindow Print function.", 0, 0,"","", 0,"Functions - PowerScript","This example is a Windows 95-style Registry Editor.  It uses PowerBuilder 5.0 TreeView and ListView controls and Registry functions to display and update the registry.

If you are using Windows 95 or Windows NT all configuration information for these Code Examples has been stored in the registry rather than the example.ini file.  The branches to this information will be opened when the example is started.  Please note:  because the registry contains important system settings, it is highly recommended that changes made when running this example be confined to these branches.  In any event, you should exercise extreme caution when updating your registry.","Registry Editor","w_regedit","5.0","This example uses the PowerBuilder 5.0 Registry functions (RegistryGet, RegistrySet, RegistryDelete, RegistryKeys, and RegistryValues).

It also demonstrates the basics of using a TreeView control.  The first level of the tree is added in the window open event.  Afterward, each additional level is added when necessary.  The code is in the ItemPopulate event of the TreeView.  The ItemPopulate is fired once for each item in the tree (the first time it is expanded).  Recursion is used to determine the full path to the current item.

This example also uses a Windows 95 Explorer-style interface which is a TreeView and ListView linked together.", 0, 0,"macintoshsol2hpuxaix","", 1,"Functions - PowerScript","This example demonstrates the use of the PowerBuilder functions to  manipulate data in the Windows95 and Windows NT Registry.

It highlights the use of functions which are new to PowerBuilder 6.0 to read and write data other than strings.

","Registry Functions","w_registry_functions","6.0","This example uses the RegsistryGet and RegistrySet functions, overloaded with the data type being read.

Valid type include:
String
ExpandString - string including unexpanded references to environment variables
Binary
ULong
MultiString - an unbounded array of strings", 1, 0,"macintoshsol2hpuxaix",null  1,"Functions - PowerScript","Select program names and either run them from you PowerBuilder app, or test to see if they are running.","Working with Executables","w_file_functions","3.0","Using the PowerBuilder Run function, programs outside of Powerbuilder may be executed.  Using Windows API functions, tests can be made as to whether a program is already running, and how many instances of it are running.  An example of how this can be helpful is if you only want one of your applications running at a time, you can place this test in the open event of the application.", 0, 0,"macintoshsol2hpuxaix","", 1,"Functions - PowerScript","This example demonstrates some new 8.0 Printer Enhancements","PB8 Printer Enhancements","w_runtime_printfunctions","8.0","Demonstrates new functions to obtain and set printer settings.", 1, 0,null null  0,"Functions - PowerScript","This example demonstrates some new 8.0 System Enhancements","PB8 System Enhancements","w_runtime_systemfunctions","8.0","Demonstrates some miscellaneous runtime enhancements.", 1, 0,null null  0,"Functions - PowerScript","This example demonstrates some new 8.0 File System Enhancements","PB8 File System Enhancements","w_runtime_filefunctions","8.0","Demonstrates some new file system functions.", 1, 0,null null  0,"Functions - PowerScript","This example shows PowerBuilder Year 2000 compliance by demonstrating how PowerBuilder functionality works with dates above the year 2000.  It includes examples of date manipulation in both DataWindows and windows.","Year 2000 Example","w_date_frame","6.0","Both 2-digit and 4-digit dates are entered, sorted, and converted.  2-digit dates with years of 00-49 are given a century of 20, while 2-digit dates with years of 50-99 are given a century of 19.", 1, 0,null null  1,"Functions - User","Example of how to call a PowerScript function from the validation rule in a DataWindow.","DataWindow Validation Rules","w_powerscript_in_validation","6.0","Validating a field in a DataWindow is very easy using the validation selection for a DataWindow field.  When the validation rule becomes complex or requires additional functions such as sql calls to a database, you can use a function written in the function painter.  The dept field in this example uses a global function as an example of this.  In this example, after the department is entered, the function does a look up in the department table to ensure that it is a valid department.

This example also uses the PB 6.0 DataWindow GroupBox.", 0, 1,"","", 1,"Functions - User","Demonstrates user-defined date functions and many of the PowerBuilder date functions.","Date Functions","w_date_functions","2.0","PowerBuilder date functions DayNumber, DayName, RelativeDate, and DaysAfter functions are used.  User-defined function f_check_date determines whether a date/day name combination are valid.  f_closest_date determines what the closest day name is to the date specified.", 0, 0,"","", 1,"Functions - User","PowerBuilder 5.0 allows function overloading at the object level.  This example uses a Global Replace function to show how to overload window functions.","Function Overloading","w_global_replace","5.0","The Global Replace function is overloaded twice and the appropriate function is called based on the number of parameters entered.  The syntax of the function call is displayed on the window.", 0, 0,"","", 1,"Functions - User","Demonstrates a generalized user function, f_Populate_DDLB_from_DB, to populate a DDLB from the database; uses dynamic SQL.","Populate DDLB from Database","w_populate_ddlb_from_db","2.0","Using dynamic SQL within the the function f_Popuate_DDLB_from_DB, the user can quickly load a DropDownListBox with unique values for a particular column and table.", 0, 0,"","", 0,"Graphs","The example displays a graph of the Percentage of Inventory of each product with a quantity greater than 30.  All other products (those with quantity less than 30) are lumped together in the ~"Other~" category.","Adding an 'Other' Category to a Graph","w_other_category","4.0","The example demonstrates how to create an ~"other~" category on a graph that groups several other categories together.", 0, 0,"","", 1,"Graphs","By using the mouse and graphs, user is able to maneuver through the data by clicking on graphs.","Drill Down & RMB Detail","w_graph_drilldown","3.0","Uses the ObjectAtPointer function to determine what the user was pointing at when clicking, doubleclicking, and holding down the right mouse button.  This window demostrates one technique of allowing the user to start at a high level and move down to the detail level.", 0, 0,"","", 0,"Graphs","This example shows a graph of Revenues per Year.  Clicking a button will add a series to the graph showing Revenues per Quarter.","Dynamically Adding a Series to a Graph","w_graph_dynamic_series","4.0","This example uses the DataWindow Modify() function to add a series to, and remove it from, a graph.", 0, 0,"","", 1,"Graphs","Has a pie graph with enhanced graph features.  You can double click on a pie to cause that slice to explode, and set the percentage of explosion.  The pie legend and text contained at the end of each pointer are computed expressions.  The title of the graph contains a computed amount.  The presentation example shows how to animate a graph for the purpose of a presentation or to grab attention.","Enhanced Pie Graph w/ Explode","w_pie_graph","4.0","The pie explosion percentage is set with the grSetDataPieExplode funtion. The current pie explosion factor is retrieved using the grGetDataPieExplode function.

To allow a user to change the explode percentage while viewing the changes, the DataWindow is passed to a popup window as a paramter. This popup will modify the  original DataWindows attributes.

The legend, title, and pointers all use computed expressions which can be set up in the DataWindow's Painter by using the ~"More~" button next to where you would normally change the label's text. ", 0, 0,"","", 0,"Graphs","Window contains DataWindow of employees, with subsidiary DataWindows that show three different graphical views of the employee data.","Graphs & Shared DataWindows","w_shared_dw_graph","3.0","The employee data is only retrieved once from the database. Using a technique called shared DataWindows, the other DataWindows (displayed as graphs), use a common (shared) data source.  Notice: Any changes made to the primary Datawindow will be reflected appropriately by the shared graph datawindows.  
Nested functions within the graphs definition are used here to pre-work the data being displayed.  In this case, the salary pie chart and average age by department graphs exclude any terminated employees. To see these functions, view the ~"Data~" definition for the graphs.", 0, 0,"","", 1,"Graphs","MDI Frame with various graph examples on sheets.  The user has control over many of the attributes of the graphs at runtime.  A user can change graph type, color, spacing, and titles.  Two types graph objects are shown:  1) Graph object in a window  2) Graph embedded in a DataWindow
","Various Graph Examples","w_graph_example_frame","3.0","To change an attribute (color, spacing etc...) of a graph the graph or DataWindow is passed to a window in the powerobjectparm.  Communication between the sheet event scripts and response windows is done using OpenWithParm.

The ~"Stat~" windows will parse through a DataWindow to find numeric data and place them in the listbox of possible columns that can be graphed.

Two general sheets are defined for this example:  sheet with a DataWindow and Graph object in a window, and sheet with a DataWindow.  All reports are inherited from these two sheets.  The only changes in the descendant are: the name of the sheet to open in the frame open event; the window title; overriding the DataWindow object name; and any attribute changes to the graph, such as a new title.  

The frame is designed to only open one instance of a sheet type at a time. Using the File menu will bring up the current window to the foreground, or open that sheet.
", 0, 0,"","", 1,"Inheritance","This example shows how to separate business rules from the GUI using custom class user objects and inheritance.","Business Class","w_employee","6.0","The business class is created by choosing the Custom Class specification for a new user object.  This class (user object) knows how to retrieve, update, insert and delete rows in a DataWindow through its methods (user object functions).  This example demonstrates a simple employee object.  The business rules for the employee object are implemented by inheriting from the business class.  Any business rules specific to the employee object are defined by overriding the ancestor user object functions.   An ancestor update window is used to send retrieve, update, insert, and delete messages to a business object.  The employee window, inherited from the ancestor update window, simply specifies that the employee object should receive these messages.", 0, 1,"","", 1,"Inheritance","Inherit French, Dutch and Spanish windows from an ancestor English window.  Shows how to extend and override scripts and window functions.","Multi-Lingual Example","w_multilingual","2.0","The French window overrides a function call to wf_total.  The Dutch and Spanish windows extend the ancestor scripts to display brief messages after the totals have been calculated.", 0, 0,"","", 0,"Inheritance","A window with two User Objects, one inherited from the other.  The base User Object can change a text style to bold, underlined, or italic.  The inherited User Object extends, overrides, and dynamically calls the ancestor object scripts to perform additional functionality.","Text Style Changer","w_style_uos","2.0","Demonstrates User Object inheritance, as well as the technique of extending, overriding and dynamically calling ancestor scripts.", 0, 0,"","", 1,"Inheritance","MDI Frame with various graph examples on sheets.  The user has control over many of the attributes of the graphs at runtime.  A user can change graph type, color, spacing, and titles.  Two types graph objects are shown:  1) Graph object in a window  2) Graph embedded in a DataWindow
","Various Graph Examples","w_graph_example_frame","3.0","To change an attribute (color, spacing etc...) of a graph the graph or DataWindow is passed to a window in the powerobjectparm.  Communication between the sheet event scripts and response windows is done using OpenWithParm.

The ~"Stat~" windows will parse through a DataWindow to find numeric data and place them in the listbox of possible columns that can be graphed.

Two general sheets are defined for this example:  sheet with a DataWindow and Graph object in a window, and sheet with a DataWindow.  All reports are inherited from these two sheets.  The only changes in the descendant are: the name of the sheet to open in the frame open event; the window title; overriding the DataWindow object name; and any attribute changes to the graph, such as a new title.  

The frame is designed to only open one instance of a sheet type at a time. Using the File menu will bring up the current window to the foreground, or open that sheet.
", 0, 0,"","", 1,"Mail Enabling","Receive a DataWindow attachment from a mail message, and display it. This uses the MAPI functions built into PowerBuilder.","MAPI Mail -  Receive Mail","w_mail_receive","3.0","This example will work with MAPI mail systems.  Your mail inbox will be displayed using a PowerBuilder front-end.  You may choose to browse through the inbox and read your mail. In addition, if you had a mail message that was sent from the Mail Send example you will be able to view a DataWindow that was attached to the letter.

Mail Send uses a PSReport format to save the DataWindow data and format as an attachment.", 0, 0,"macintoshsol2hpuxaix","", 1,"Mail Enabling","Retrieve data in a DataWindow, and then mail the entire DataWindow (definition + contents) to a designated recipient. Uses the MAPI functions built into PowerBuilder.","MAPI Mail -  Send Mail","w_mail_send","3.0","Using a MAPI compliant mail system, this example will contruct a letter and allow you to send it to someone on the mail system. The PowerBuilder example will communicate directly with your mail system.  A DataWindow is sent as an attachment in the letter.", 0, 0,"macintoshsol2hpuxaix","", 1,"MDI","This example shows how to easily display context-sensitive MicroHelp based on the
current column of a DataWindow.","Context-Sensitive MicroHelp","w_tag_help_frame","3.0","The MicroHelp for each column in the DataWindow is stored in the DataWindow's tag list.  The tag list can be accessed in the DataWindow painter from the Edit menu.  On the itemfocuschanged event of the DataWindow, the Describe( ) function is used to obtain the tag value of the current column.  Then, the SetMicroHelp( ) function is used to set the MicroHelp on the MDI frame window to the tag value of the column.", 0, 0,"","", 1,"MDI","This example shows how to create a custom MDI frame, with communication between the custom user object and descendant windows.  It also shows two-level inheritance, extending and overriding ancestor event scripts, and communication between windows and menus in an MDI.  One level of menu inheritance is also used in this example. ","Custom MDI Frame","w_frame_queries","2.0","An custom MDI example in which sheet windows are either descendants of a window containing 1 DataWindow, or one containing 2 DataWindows (which is itself a descendant of the 1-DataWindow window).  Thus, each sheet is a first or second-generation descendant.  Behavior such as row selection is in the top ancestor.  Behavior related to master/detail processing is in the 2nd level ancestor.  A custom user object is on the custom MDI Frame to perform operations on the DataWindow.", 0, 0,"","", 1,"MDI","This example implements a Windows Program Manager-style interface for data manipulation.  This is an MDI application with a ListView control on each sheet.  It allows the user to ~"drill-down~" to the desired record.","Data Manager","w_data_manager_frame","5.0","This example demonstrated populating a ListView with data from a DataStore.  It also shows how to implement the basic ListView and MDI functionality.", 0, 0,"","", 1,"MDI","Uses OpenUserObjectWithParm to create User Object CommandButtons to interact with a DataWindow control.  Buttons can created 'As Needed' by selecting the desired action from the menu, and then clicking on the window. The button is created and when clicked, performs the action that was passed to it when it was opened.","Dynamic User Objects","w_dynamic_uo_open_uo_frame","3.0","MDI, OpenUserObjectWithParm, Inheritance (menus), changing cursors.", 0, 0,"","", 1,"MDI","How to determine what sheets are open in an MDI application without having to keep track of them by writing additional code that is executed when a sheet is opened or closed.","GetFirstSheet & GetNextSheet","w_mdi_first_next","4.0","Shows how to call the GetFirstSheet( ) and GetNextSheet( ) functions. This example also provides some simple user defined functions to determine if a sheet with a specified title is open, and to list all of the open sheets.  This example also demonstrates the new TileHorizontal! feature of the ArrangeSheets function.", 0, 0,"","", 1,"MDI","A generic notepad which uses a menu with a toolbar, similar to the Script Painter.  The notepad allows multiple documents to be opened as MDI sheets.  Documents can be created or opened from an existing text file.   Files can be saved, deleted, or printed.  The notepad provides all of the standard text editing capabilities (cut, copy, paste, ...) along with other manipulations.  Options to display a status indicator for the current text line and column, and a clock are provided.","PowerBuilt Notepad","w_notepad_frame","5.0","The menu communicates to the documents (sheets) through custom user events that are triggered from the menu.  DOS files are opened, saved, or deleted using the Windows common dialogs through the GetFileOpenName and GetFileSaveName functions.  Demonstrates file functions including FileOpen, FileClose, FileRead, FileWrite, and FileExists.  The multi-line edit attribute HideSelection which allows selected text to remain selected when the window loses focus is also used.  This example also demonstrates the use of multiple and cascading toolbars.", 0, 0,"","", 1,"Menu Techniques","Shows how to programatically change menus for a window, use popup menus, and dynamically change menu attributes.","MenuItem Attributes","w_frame_menu_functions","2.0","The ChangeMenu function is used to change the menuid of the window.  Popup menus are displayed at the current pointer location accessed from the right mouse button by using the PopMenu function, PointerX and PointerY functions, and the rbuttondown event.  Menuitem attributes are changed by stepping through the menuid item arrays.", 0, 0,"","", 1,"Menu Techniques","This example shows how to break a toolbar into multiple toolbars and give the user the ability to move them and saves their positions.","Multiple Toolbars","w_toolbar_func","5.0","Menu items can be grouped together by using the index attribute.  Different indexes are displayed as separate toolbars which can be placed anywhere in the toolbar area.", 0, 0,"","", 1,"Miscellaneous","An arithmetic operator is applied to two decimal values, and the result is displayed as decimals with different precisions.  This example shows how a calculated decimal value can be different based on the precision that the variable is declared with.","Decimal Data Type Precision","w_decimal_test","2.0","Editmasks are used to enter the two decimal values.  A DropDownListBox is used for the arithmetic operators.  The window calls a window function to compute the results on the modified event of the EditMasks and the selectionchanged event of the DropDownListBox.", 0, 0,"","", 0,"Miscellaneous","This example demonstrates the garbage collection feature of PowerBuilder.  It shows the available memory before and after creating a large number of user objects with garbage collection turned off and on.","Garbage Collection","w_garbage_collect","6.0"," When PowerBuilder returns from executing any system-triggered event, it compares the elapsed time since it last ran a garbage collection pass to the specified garbage collection interval. If the elapsed time exceeds the current garbage collection interval, the garbage collector is run.  The default interval is 500 milliseconds (1/2 second). ", 1, 0,null null  1,"Miscellaneous","This example runs various performance benchmark tests in both P-Code and Machine Code compiled versions.  It then produces a comparison report of the test timings.","Performance Benchmarks","w_benchmark_ex","5.0","The performance benchmarks highlight the performance increases of Machine Code compiled PowerBuilder.  They identify which PowerBuilder functions that can be expected to be faster with compiled code.

Benchmark tests include:  script looping, array sorting, the TAK benchmark, function, event and variable overhead, window instantiation, string parsing, and copying data in and out of a DataStore.", 0, 0,"sol2hpuxaix","", 1,"Miscellaneous","This is a fun (or possible frustrating) example with a special PowerBuilder GUI message.","The Meaning of Life","w_meaning","4.0","This example makes use of the mousemove event.", 0, 0,"","", 0,"Miscellaneous","This example is a window with a DataWindow control that is too tall to fit in the window.  By changing the window's lines per page and units per line, the entire DataWindow can be scrolled through.","Window Scrolling","w_window_scroll","3.0","The window attributes LinesPerPage and UnitsPerLine are modified to change the window scrolling.", 0, 0,"","", 1,"Object Communication","Shows how to cancel DataWindow retrieval and printing while they are in progress.","Cancel Retrieval & Printing","w_cancel_retrieval","2.0","The RetrieveStart, RetrieveRow, and RetrieveEnd events in the DataWindow are used to monitor a cancel retrieve request from the user.  The PrintDataWindow function has an optional parameter to specify whether the cancel dialog is to be displayed or not.", 0, 0,"","", 1,"Object Communication","Shows the use of two instances of the same User Object in a window, which are used to set window background color and text color.","Color Changer","w_uo_colors","2.0","Shows how to communicate between user objects and windows by coding specific window script in a custom user event on the user object.  Also shows how to call user object functions.", 0, 0,"","", 0,"Object Communication","Within a Multiple Document Interface (MDI) frame window, open one or more instances of three different report windows (MDI sheets).  Drag Department Name onto any report window to see the report for that department.  ","Department Reports","w_mdi_main","2.0","Shows how to drag objects from one window to another and use the dragdrop event to determine the type of object that was dropped.  It also uses the message object to pass information between windows.", 0, 0,"","", 1,"Object Communication","A simple employee information system where employees can be added to the database or changed.  The first window retrieves all the departments.  Once a department is selected, the second window opens and displays the employees for the department.  The third window contains the employee details, where employee data can be changed.","OpenWithParm & CloseWithReturn","w_eis_dept","3.0","This example shows how to use the OpenWithParm and CloseWithReturn functions to pass information in a structure to different windows.  The employee details DataWindow contains a DropDownDataWindow of departments and states.  Several different edit styles and display formats are also demonstrated.", 0, 0,"","", 0,"Object Communication","MDI Frame with various graph examples on sheets.  The user has control over many of the attributes of the graphs at runtime.  A user can change graph type, color, spacing, and titles.  Two types graph objects are shown:  1) Graph object in a window  2) Graph embedded in a DataWindow
","Various Graph Examples","w_graph_example_frame","3.0","To change an attribute (color, spacing etc...) of a graph the graph or DataWindow is passed to a window in the powerobjectparm.  Communication between the sheet event scripts and response windows is done using OpenWithParm.

The ~"Stat~" windows will parse through a DataWindow to find numeric data and place them in the listbox of possible columns that can be graphed.

Two general sheets are defined for this example:  sheet with a DataWindow and Graph object in a window, and sheet with a DataWindow.  All reports are inherited from these two sheets.  The only changes in the descendant are: the name of the sheet to open in the frame open event; the window title; overriding the DataWindow object name; and any attribute changes to the graph, such as a new title.  

The frame is designed to only open one instance of a sheet type at a time. Using the File menu will bring up the current window to the foreground, or open that sheet.
", 0, 0,"","", 1,"OLE","A new feature of PowerBuilder 5.0 is the ability to include Binary Large Object (BLOB) columns in a Data Pipeline.  This example will create a copy of the OLE table which includes a blob column.","Including Blob Columns in a Data Pipeline","w_pipeline_blob","5.0","This example demonstrates including a blob column in a Data Pipeline.  It also shows how to display an OLE 2.0 object in a DataWindow.", 0, 0,"macintoshsol2hpuxaix","", 1,"OLE","Uses OLE 2.0 Control on a window to demonstrate some of the PowerScript functions supporting OLE.","OLE 2.0 Control","w_ole_example_frame","4.0","OLE 2.0 window controls contents can be swapped out at runtime. This example shows how to create or load an OLE object. 

The objects then can be saved to the database by converting them to a blob and saving the in the database as a long binary type.", 0, 0,"macintoshsol2hpuxaix","", 1,"OLE","A multilineedit is used to let the user type in. Hitting the spellcheck button will prompt the user to correct words in the multiline edit, but not in Excel's dictionary.","Spellcheck w/OLE 2","w_spellcheck","4.0","Using OLE automation, Excel is started as an internal ole object. The contents of the mle are copied to the a spreadsheet cell, and then spellchecking is invoked. When Excel is finished spellchecking, the user's mle is updated with the revisions made to the document.", 0, 0,"macintoshsol2hpuxaix","", 0,"Recursion","This example uses recursion to display all of the directories for a drive device in a tree.  It demonstrates two ways of presenting the information.  First, using a DataWindow to create a tree control, then using the new PowerBuilder 5.0 TreeView control.  A Tab control is used to switch between the two views.","Directory Tree","w_dir_tree","5.0","The process is started by passing the drive letter to a recursive function.  The function finds all of the subdirectories for that directory, and then calls itself once for each directory.  The process repeats until all directories are found.

This example also demonstrates the use of the PowerBuilder 5.0 window controls:  TreeView, Tab, and DropDownPictureListBox.", 0, 0,"","", 1,"Recursion","Problem of Towers of Hanoi.  A problem easily solved with recursion, that is difficult to do nonrecursively. The puzzle involves three pegs. The problem is to move all disks from the left peg to the right peg according to certain rules.  For a complete description of rules, see the Help within the window.","Towers of Hanoi","w_towers_hanoi","3.0","Recursion is technique of having a function or subroutine call itself.  Each time the function or subroutine is called, it keeps its own set of variables ~"local~" to that iteration.  The advantage of recursive functions is that they can be used to create versions of several algorithms that are clearer and simpler than their iterative versions.", 0, 0,"","", 1,"SQL - Embedded","This example shows the four formats of dynamic SQL.  Dynamic SQL may be used when the SQL statement or its parameters are unknown at compile time, or if PowerBuilder does not support the statement in embedded SQL.","Dynamic SQL: 4 Formats","w_dynsql_frame","3.0","Format 1 of dynamic SQL is used to execute an SQL statement that has no result set, and no input parameters.  This format is used for DDL.  The example issues DDL to create, alter, and drop a table.

Format 2 of dynamic SQL is used when there is no result set, and the input parameters are known.  The example provided builds a simple update statement for employees based on the current department and update values that you specify.

Format 3 of dynamic SQL is used to execute SQL that will have a known result set with known input parameters.  The example provided retrieves the employee names for the specified department.

Format 4 of dynamic SQL is used when there is a result set, but the input parameters and result set columns are unknown at compile time.  The example allows entry of a dynamic SQL statement.  The dynamic staging area is prepared with the SQL statement, and a dynamic cursor is associated with the dynamic staging area.  The dynamic staging area is described into the dynamic description area.  Values are assigned to the input parameters with the SetDynamicParm function.  The GetDynamic---- functions are used to obtain the values of the output parameters as the rows are fetched.", 0, 0,"","", 1,"SQL - Embedded","Demonstrates a generalized user function, f_Populate_DDLB_from_DB, to populate a DDLB from the database; uses dynamic SQL.","Populate DDLB from Database","w_populate_ddlb_from_db","2.0","Using dynamic SQL within the the function f_Popuate_DDLB_from_DB, the user can quickly load a DropDownListBox with unique values for a particular column and table.", 0, 0,"","", 0,"SQL - Procedures and Triggers","A new feature of PowerBuilder 5.0 is the ability to use a Stored Procedure as the source for a Data Pipeline.  This example will use a Data Pipeline to create and load a new table that includes all information about a Sales Order.","Stored Procedure Source Data Pipeline","w_pipeline_sp","5.0","This example demonstrates building a Data Pipeline from a Stored Procedure.", 0, 0,"","desktop", 1,"SQL - Procedures and Triggers","All of the DataWindows that are in this example were created with a stored procedure data source.","Stored Procedure Source DWs","w_stored_proc","4.0","Besides demonstrating several DataWindows with a stored procedure data source, this example also shows some PowerBuilder 4.0 techniques.  The DataWindow of sales orders incorporates the Product ID retrieval argument into its title.  This DataWindow also contains a nested DataWindow of line item detail information for each sales order.  The nested DataWindow uses a yellow rectangle to highlight the product ID that we are interested in seeing by having an expression defined for the rectangle's width attribute.  This example also shows how to explicitly retrieve a DropDownDataWindow.", 0, 0,"","desktop", 1,"SQL - Procedures and Triggers","This example shows how to use stored procedures to update the database when changes are made to data in the DataWindow.","Updating DW through Stored Proc.","w_sp_update","4.0","When the Update function is called for a DataWindow, the sqlpreview event (on the DataWindow) is triggered once for each row that is updated.  In the sqlpreview event, the GetUpdateStatus and GetItemStatus functions are used to find out the row being updated, which buffer it is in, and the status of the row (whether it is new, new & modified, modified, or not modified).  Based on the buffer and status of the row, the appropriate parameter and data from that row are passed to a stored procedure which handles all update functionality.  Finally, an action code is set that causes the DataWindow to skip the SQL statement that it should have submitted for the row.", 0, 0,"","desktop", 0,"User Objects","This Window uses an analog clock user object. The clock changes appearance (second, minute, and hour hands turn) with each tick of the clock.  It shows how to call user object functions, and produce motion using Sin() and Cos() functions.","Analog Clock","w_analog_clock","2.0","The uf_start_ticking user object function, called from the open event of the window,  sets the timer event for the user object.  The timer event of the user object calculates the new positions of the hour, minute, and second hands.  The close event of the window calls the user object function uf_stop_ticking, which resets the user objects timer event.", 0, 0,"","", 0,"User Objects","This example shows how to separate business rules from the GUI using custom class user objects and inheritance.","Business Class","w_employee","6.0","The business class is created by choosing the Custom Class specification for a new user object.  This class (user object) knows how to retrieve, update, insert and delete rows in a DataWindow through its methods (user object functions).  This example demonstrates a simple employee object.  The business rules for the employee object are implemented by inheriting from the business class.  Any business rules specific to the employee object are defined by overriding the ancestor user object functions.   An ancestor update window is used to send retrieve, update, insert, and delete messages to a business object.  The employee window, inherited from the ancestor update window, simply specifies that the employee object should receive these messages.", 0, 1,"","", 1,"User Objects","Shows the use of two instances of the same User Object in a window, which are used to set window background color and text color.","Color Changer","w_uo_colors","2.0","Shows how to communicate between user objects and windows by coding specific window script in a custom user event on the user object.  Also shows how to call user object functions.", 0, 0,"","", 0,"User Objects","This example shows how to create a custom MDI frame, with communication between the custom user object and descendant windows.  It also shows two-level inheritance, extending and overriding ancestor event scripts, and communication between windows and menus in an MDI.  One level of menu inheritance is also used in this example. ","Custom MDI Frame","w_frame_queries","2.0","An custom MDI example in which sheet windows are either descendants of a window containing 1 DataWindow, or one containing 2 DataWindows (which is itself a descendant of the 1-DataWindow window).  Thus, each sheet is a first or second-generation descendant.  Behavior such as row selection is in the top ancestor.  Behavior related to master/detail processing is in the 2nd level ancestor.  A custom user object is on the custom MDI Frame to perform operations on the DataWindow.", 0, 0,"","", 1,"User Objects","Utility to create a structure or Autoinstantiate Custom Class NVO that matches a DataWindow.  This allows data to be copied to and from the DataWindow using the DataWindow direct object reference syntax.","DataWindow to Structure Utility","w_dwtostr","5.0","The exported syntax for either a structure or Autoinstantiate Custom Class NVO will be generated and can be saved to a file.  The object can then be created by importing the file.", 0, 0,"","", 1,"User Objects","A User Object that looks like a DropDownListBox for a date field but when it is expanded it shows a calendar image.  This UO was submitted by Mike Ball of Admiral Software in the United Kingdom.","Drop Down Calendar","w_calendar","3.0","Calling user object functions", 0, 0,"","", 0,"User Objects","Uses OpenUserObjectWithParm to create User Object CommandButtons to interact with a DataWindow control.  Buttons can created 'As Needed' by selecting the desired action from the menu, and then clicking on the window. The button is created and when clicked, performs the action that was passed to it when it was opened.","Dynamic User Objects","w_dynamic_uo_open_uo_frame","3.0","MDI, OpenUserObjectWithParm, Inheritance (menus), changing cursors.", 0, 0,"","", 1,"User Objects","The PowerBuilder Jigsaw Puzzle.  Scramble the PowerBuilder logo and put it back together.","PowerPuzzle","w_puzzle","5.0","This example demonstrates the use of standard user objects and drag and drop.", 0, 0,"","", 1,"User Objects","A basic selection list from which the user is to choose a value.  With each keystroke, the user object will select the entry from the list which best matches the search value entered.","Quick Search","w_select_from_list","2.0","Depending on which table is chosen, a SQL statement is passed to the user object.  Then, the dwSyntaxFromSQL function is called to dynamically build the DataWindow based on the select statement passed to it.  Once the DataWindow is populated, a dwFind function is used in the key pressed event of the single line edit to select the row that most closely matches the characters typed in.", 0, 0,"","", 0,"User Objects","An MDI application that uses a window based on the PowerBuilder Quick Select option in the DataWindow Painter.  After building the DataWindow it is displayed in an MDI sheet from where you may save the DataWindow into a PowerBuilder Library.","Runtime DataWindow Painter","w_mdi_quick_select","3.0","This example uses the SyntaxFromSQL function to dynamically build a DataWindow from an SQL Statement.  Once the DataWindow has been created, the Describe( ) function is used to display some of the attribute values of columns in the DataWindow.  The Modify( ) function is used to change the values of these attributes.  The Save Dialog uses the DirList( ) function to display the list of PBLs.  The LibraryImport( ) function is used to save the DataWindow.", 0, 0,"","", 1,"User Objects","Illustrates several User Objects:  
(1) SingleLineEdit that checks for dates that are Fridays.
(2) Numeric-only SingleLineEdit.
(3) SingleLineEdit which allows characters to be entered in overtype mode.
(4) SingleLineEdit which only allows numeric input within a specified range.
(5) Progress indicator bar.","User Object Examples","w_uo_sampler","3.0","Examples of how user objects can be used to reduce the amount of code in a window.  The 4.0 PowerScript function, GetData(), is used to obtain the date from a date edit mask on the ~"check for Friday~" user object.  Also shows how to manipulate user objects through user object functions.", 0, 0,"","", 1,"Window Controls","This example implements a Windows 95 Explorer-style interface for data manipulation.  This consists of two controls (a TreeView and a ListView) linked together.","Data Explorer","w_data_explorer","5.0","This example demonstrates populating TreeView and ListView controls with data from DataStores.  It also shows how to link these two controls together using their standard events.", 0, 0,"","", 1,"Window Controls","This example implements a Windows Program Manager-style interface for data manipulation.  This is an MDI application with a ListView control on each sheet.  It allows the user to ~"drill-down~" to the desired record.","Data Manager","w_data_manager_frame","5.0","This example demonstrated populating a ListView with data from a DataStore.  It also shows how to implement the basic ListView and MDI functionality.", 0, 0,"","", 1,"Window Controls","This example uses recursion to display all of the directories for a drive device in a tree.  It demonstrates two ways of presenting the information.  First, using a DataWindow to create a tree control, then using the new PowerBuilder 5.0 TreeView control.  A Tab control is used to switch between the two views.","Directory Tree","w_dir_tree","5.0","The process is started by passing the drive letter to a recursive function.  The function finds all of the subdirectories for that directory, and then calls itself once for each directory.  The process repeats until all directories are found.

This example also demonstrates the use of the PowerBuilder 5.0 window controls:  TreeView, Tab, and DropDownPictureListBox.", 0, 0,"","", 1,"Window Controls","Several examples of how MultiLineEdits scroll depending on ScrollBars and AutoScrolling attributes.  The four attributes available are:  Horizontal Scroll Bar, Vertical Scroll Bar, Horizontal Auto Scroll, and Vertical Auto Scroll.","MultiLineEdit Scrolling Attributes","w_mle_scroll","3.0","Shows the different effects of the scrolling attributes in a MultiLineEdit.", 0, 0,"","", 0,"Window Controls","Uses OLE 2.0 Control on a window to demonstrate some of the PowerScript functions supporting OLE.","OLE 2.0 Control","w_ole_example_frame","4.0","OLE 2.0 window controls contents can be swapped out at runtime. This example shows how to create or load an OLE object. 

The objects then can be saved to the database by converting them to a blob and saving the in the database as a long binary type.", 0, 0,"macintoshsol2hpuxaix","", 1,"Window Controls","Browse the bitmap and icon files in a directory.  You may also zoom the bitmap pictures and view both large and small versions of the icons.  It will default to the Art Gallery directory if it has been installed.","PictureListBox Picture Browser","w_plb","5.0","This example shows how to use a PictureListBox.  It also demonstrates using a ListView control to display icons.", 0, 0,"","", 1,"Window Controls","This is the PowerBuilder aquarium.","PowerBuilder  Aquarium","w_fish","5.0","It illustrates using the Timer and Draw functions to move the fish around.  It also shows how to use overlay pictures in a ListView", 0, 0,"","", 0,"Window Controls","This example is a Windows 95-style Registry Editor.  It uses PowerBuilder 5.0 TreeView and ListView controls and Registry functions to display and update the registry.

If you are using Windows 95 or Windows NT all configuration information for these Code Examples has been stored in the registry rather than the example.ini file.  The branches to this information will be opened when the example is started.  Please note:  because the registry contains important system settings, it is highly recommended that changes made when running this example be confined to these branches.  In any event, you should exercise extreme caution when updating your registry.","Registry Editor","w_regedit","5.0","This example uses the PowerBuilder 5.0 Registry functions (RegistryGet, RegistrySet, RegistryDelete, RegistryKeys, and RegistryValues).

It also demonstrates the basics of using a TreeView control.  The first level of the tree is added in the window open event.  Afterward, each additional level is added when necessary.  The code is in the ItemPopulate event of the TreeView.  The ItemPopulate is fired once for each item in the tree (the first time it is expanded).  Recursion is used to determine the full path to the current item.

This example also uses a Windows 95 Explorer-style interface which is a TreeView and ListView linked together.", 0, 0,"macintoshsol2hpuxaix","", 1,"Window Controls","Shows how to scan the control array of a window and then resize all of the controls on the window when the window is resized.","Resizing Controls on a Window","w_scale","3.0","Shows use of TypeOf( ) function to determine the type of each control in the control array and then change the size of the control and its pertinent attributes.  The original sizes of each control are recorded in the open event of the window and then used in the resized event to scale the controls proportionately to the new size of the window.", 0, 0,"","", 1,"Window Controls","The RichPad is a simple word processing program.  It includes all the basic functionality of the popular word processors.","RichPad RTE Control","w_rte","5.0","This examples shows how to use the Rich Text Edit (RTE) control.", 0, 0,"","", 1,"Window Controls","This example shows a practical use of the ListView control.  It uses a ListView containg all the products which can be dragged and dropped onto a new order.","Sales Order ListView","w_add_sales_order","5.0","This example demonstrates populating a ListView with data from a DataStore.  It also shows how to implement drag and drop functionality and RMB support in a ListView.", 0, 0,"","", 1,"Window Controls","Window contains basic employee DataWindow, with subsidiary DataWindows on the pages of a Tab control for less often used information and address.","Share DataWindow buffers","w_empl_dw_share_buffers","6.0","Three updateable DataWindows are sharing one primary data source using the ShareData function.  Any retrieves made to the primary DataWindow update the secondary DataWindows.  Also, any updates to secondary DataWindows update the primary DataWindow store.

Another technique shown is using a Tab control to reduce the clutter of the screen with data/options that are not normally used.

This example also uses the PB 6.0 DataWindow GroupBox.
", 0, 1,"","", 1,"Window Controls","This is an example of a Customer Phone Directory.  It uses the PowerBuilder 5.0 Tab Control with a tab for each letter.  It demonstrates two different ways to do this.  First using a single DataWindow and tabpages on the Tab control to filter the DataWindow.  Then using a User Object with a DataWindow as the tabpages on the Tab control and retrieving the data when that object is displayed.","Tab Control Phone Directory","w_phone_dir","5.0","For the first method, the DataWindow is not part of the Tab control, it is on top of the Tab control.  The DataWIndow is retrieved when the window is opened and contains all customers.  It is filtered in the SelectionChanged event of the Tab control.

For the second method, the DataWindow on the user object has a retrieval argument to only retrieve customers beginning with a particular letter.  So the data is not retrieved until needed for display.  The second Tab control object also uses the create on demand attribute so the objects of each page are not created until needed for display.", 0, 0,"","", 1,"Window Controls","This example uses a TreeView for data navigation and DataWindows to update the data.","TreeView / DataWindow Linking","w_tv_dw_link","5.0","This example demonstrates populating a TreeView with data from a DataStore and linking the levels of the TreeView to DataWindows.", 0, 0,"","", 1,"Window Controls","This example demonstrates new PowerBuilder Controls","PB7 Progress Bar Controls","w_progressbars","7.0","This example demonstrates Horizontal and Vertical Progress Bars and their properties", 1, 0,null null  0,"Window Controls","This example demonstrates new PowerBuilder Controls","PB7 Track Bar Controls","w_trackbars","7.0","This example demonstrates Horizontal and Vertical Track Bars and their properties", 1, 0,null null  0,"Window Controls","This example demonstrates new PowerBuilder Controls","PB7 Hyperlink Controls","w_hyperlinks","7.0","This example demonstrates StaticText and Picture Hyperlinks", 1, 0,null null  0,"Window Controls","Transfer employees from one department to another by dragging and dropping TreeView items","TreeView Drag/Drop","w_employee_xfer","5.0","This example demonstrates how to update a TreeView by dragging and dropping branches.", 0, 0,"","", 1,"Window Controls","Divide a window into 3 panels and allow the user to resize them by dragging the bars between them.","Window Panels","w_size_panels","4.0","This example uses static text objects for the bars and the mousemove and mousedown events to size the panels.", 0, 0,"","", 0,) 
text(band=header alignment="2" text="Window" border="0" color="0" x="1646" y="8" height="52" width="873" html.valueishtml="0"  name=examples_window_t visible="1"  font.face="MS Sans Serif" font.height="-8" font.weight="700"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
text(band=header alignment="2" text="Version" border="0" color="0" x="2528" y="8" height="52" width="283" html.valueishtml="0"  name=examples_version_t visible="1"  font.face="MS Sans Serif" font.height="-8" font.weight="700"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
text(band=header alignment="2" text="Technique" border="0" color="0" x="2821" y="8" height="52" width="1751" html.valueishtml="0"  name=examples_technique_t visible="1"  font.face="MS Sans Serif" font.height="-8" font.weight="700"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
text(band=header alignment="2" text="New" border="0" color="0" x="4581" y="8" height="52" width="215" html.valueishtml="0"  name=examples_new_t visible="1"  font.face="MS Sans Serif" font.height="-8" font.weight="700"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
text(band=header alignment="2" text="Enhanced" border="0" color="0" x="4805" y="8" height="52" width="293" html.valueishtml="0"  name=examples_enhanced_t visible="1"  font.face="MS Sans Serif" font.height="-8" font.weight="700"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
text(band=header alignment="2" text="Platform" border="0" color="0" x="5106" y="8" height="52" width="933" html.valueishtml="0"  name=examples_ostype_t visible="1"  font.face="MS Sans Serif" font.height="-8" font.weight="700"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
text(band=header alignment="2" text="Pbtype" border="0" color="0" x="6048" y="8" height="52" width="407" html.valueishtml="0"  name=examples_pbtype_t visible="1"  font.face="MS Sans Serif" font.height="-8" font.weight="700"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
text(band=header alignment="2" text="Example Help" border="0" color="0" x="6464" y="8" height="52" width="402" html.valueishtml="0"  name=examples_exhelp_t visible="1"  font.face="MS Sans Serif" font.height="-8" font.weight="700"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
text(band=header alignment="2" text="Title" border="0" color="0" x="1157" y="8" height="52" width="480" html.valueishtml="0"  name=examples_title_t visible="1"  font.face="MS Sans Serif" font.height="-8" font.weight="700"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
text(band=header alignment="2" text="Description" border="0" color="0" x="9" y="8" height="52" width="645" html.valueishtml="0"  name=examples_description_t visible="1"  font.face="MS Sans Serif" font.height="-8" font.weight="700"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=1 alignment="0" tabsequence=32766 border="0" color="0" x="9" y="8" height="64" width="645" format="[general]" html.valueishtml="0"  name=group_id  tag="Code example topic" visible="1" edit.limit=40 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=2 alignment="0" tabsequence=32766 border="0" color="0" x="663" y="8" height="64" width="485" format="[general]" html.valueishtml="0"  name=description  tag="A summary of what the code example does" visible="1" edit.limit=32000 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=3 alignment="0" tabsequence=32766 border="0" color="0" x="1157" y="8" height="64" width="480" format="[general]" html.valueishtml="0"  name=title  tag="Title of the example" visible="1" edit.limit=60 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=4 alignment="0" tabsequence=32766 border="0" color="0" x="1646" y="8" height="64" width="873" format="[general]" html.valueishtml="0"  name=window  tag="Window that is opened when the example runs" visible="1" edit.limit=40 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=5 alignment="0" tabsequence=32766 border="0" color="0" x="2528" y="8" height="64" width="283" format="[general]" html.valueishtml="0"  name=version  tag="Version of PowerBuilder that the example pertains to" visible="1" edit.limit=5 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=6 alignment="0" tabsequence=32766 border="0" color="0" x="2821" y="8" height="64" width="1751" format="[general]" html.valueishtml="0"  name=technique  tag="A technical summary of what the code example is showing" visible="1" edit.limit=32000 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=7 alignment="0" tabsequence=32766 border="0" color="0" x="4581" y="8" height="64" width="215" format="[general]" html.valueishtml="0"  name=new  tag="Determines if the example is new for the current release of PowerBuilder" visible="1" edit.limit=0 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=8 alignment="0" tabsequence=32766 border="0" color="0" x="4805" y="8" height="64" width="293" format="[general]" html.valueishtml="0"  name=enhanced  tag="Determines if the code example has been changed, or enhanced, for the current release" visible="1" edit.limit=0 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=9 alignment="0" tabsequence=32766 border="0" color="0" x="5106" y="8" height="64" width="933" format="[general]" html.valueishtml="0"  name=ostype  tag="Determines what operating systems the example will run on" visible="1" edit.limit=40 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=10 alignment="0" tabsequence=32766 border="0" color="0" x="6048" y="8" height="64" width="407" format="[general]" html.valueishtml="0"  name=pbtype  tag="Determines whether the example will run on desktop or enterprise" visible="1" edit.limit=17 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
column(band=detail id=11 alignment="1" tabsequence=32766 border="0" color="0" x="6464" y="8" height="64" width="402" format="[General]" html.valueishtml="0"  name=exhelp  tag="Determine if the example has help associated with it in the Help File." visible="1" edit.limit=0 edit.case=any edit.focusrectangle=no edit.autoselect=yes edit.autohscroll=yes  font.face="MS Sans Serif" font.height="-8" font.weight="400"  font.family="2" font.pitch="2" font.charset="0" background.mode="1" background.color="536870912" background.transparency="0" background.gradient.color="8421504" background.gradient.transparency="0" background.gradient.angle="0" background.brushmode="0" background.gradient.repetition.mode="0" background.gradient.repetition.count="0" background.gradient.repetition.length="100" background.gradient.focus="0" background.gradient.scale="100" background.gradient.spread="100" tooltip.backcolor="134217752" tooltip.delay.initial="0" tooltip.delay.visible="32000" tooltip.enabled="0" tooltip.hasclosebutton="0" tooltip.icon="0" tooltip.isbubble="0" tooltip.maxwidth="0" tooltip.textcolor="134217751" tooltip.transparency="0" transparency="0" )
htmltable(border="1" )
htmlgen(clientevents="1" clientvalidation="1" clientcomputedfields="1" clientformatting="1" clientscriptable="0" generatejavascript="1" encodeselflinkargs="1" netscapelayers="0" pagingmethod=0 generatedddwframes="1" )
xhtmlgen() cssgen(sessionspecific="0" )
xmlgen(inline="0" )
xsltgen()
jsgen()
export.xml(headgroups="1" includewhitespace="0" metadatatype=0 savemetadata=0 )
import.xml()
export.pdf(method=0 distill.custompostscript="0" nativepdf.customsize=0 nativepdf.customorientation=0 nativepdf.pdfstandard=0 nativepdf.useprintspec=no )
export.xhtml()
 