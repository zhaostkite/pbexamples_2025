$PBExportHeader$m_data_manager.srm
$PBExportComments$Menu for the Data Manager
forward
global type m_data_manager from menu
end type
type m_file from menu within m_data_manager
end type
type m_open from menu within m_file
end type
type m_edit from menu within m_file
end type
type m_- from menu within m_file
end type
type m_close from menu within m_file
end type
type m_exit from menu within m_file
end type
type m_file from menu within m_data_manager
m_open m_open
m_edit m_edit
m_- m_-
m_close m_close
m_exit m_exit
end type
type m_options from menu within m_data_manager
end type
type m_autoarrange from menu within m_options
end type
type m_minimizeonuse from menu within m_options
end type
type m_options from menu within m_data_manager
m_autoarrange m_autoarrange
m_minimizeonuse m_minimizeonuse
end type
type m_window from menu within m_data_manager
end type
type m_cascade from menu within m_window
end type
type m_tilehorizontal from menu within m_window
end type
type m_tilevertical from menu within m_window
end type
type m_arrangeicons from menu within m_window
end type
type m_-2 from menu within m_window
end type
type m_view from menu within m_window
end type
type m_largeicon1 from menu within m_view
end type
type m_smallicon1 from menu within m_view
end type
type m_list1 from menu within m_view
end type
type m_report1 from menu within m_view
end type
type m_view from menu within m_window
m_largeicon1 m_largeicon1
m_smallicon1 m_smallicon1
m_list1 m_list1
m_report1 m_report1
end type
type m_window from menu within m_data_manager
m_cascade m_cascade
m_tilehorizontal m_tilehorizontal
m_tilevertical m_tilevertical
m_arrangeicons m_arrangeicons
m_-2 m_-2
m_view m_view
end type
type m_help from menu within m_data_manager
end type
type m_examplehelp from menu within m_help
end type
type m_-1 from menu within m_help
end type
type m_aboutthisexample from menu within m_help
end type
type m_help from menu within m_data_manager
m_examplehelp m_examplehelp
m_-1 m_-1
m_aboutthisexample m_aboutthisexample
end type
end forward

global type m_data_manager from menu
m_file m_file
m_options m_options
m_window m_window
m_help m_help
end type
global m_data_manager m_data_manager

type variables

end variables

on m_data_manager.create
m_data_manager=this
this.m_file=create m_file
this.m_options=create m_options
this.m_window=create m_window
this.m_help=create m_help
this.Item[]={this.m_file, &
this.m_options, &
this.m_window, &
this.m_help}
end on

on m_data_manager.destroy
destroy(this.m_file)
destroy(this.m_options)
destroy(this.m_window)
destroy(this.m_help)
end on

type m_file from menu within m_data_manager
m_open m_open
m_edit m_edit
m_- m_-
m_close m_close
m_exit m_exit
end type

on m_file.create
this.Text="&File"
this.m_open=create m_open
this.m_edit=create m_edit
this.m_-=create m_-
this.m_close=create m_close
this.m_exit=create m_exit
this.Item[]={this.m_open, &
this.m_edit, &
this.m_-, &
this.m_close, &
this.m_exit}
end on

on m_file.destroy
destroy(this.m_open)
destroy(this.m_edit)
destroy(this.m_-)
destroy(this.m_close)
destroy(this.m_exit)
end on

event clicked;w_data_manager	lw_Parent

lw_Parent = ParentWindow

If lw_Parent.lv_1.SelectedIndex() > 0 Then
	This.m_open.Enabled = True
	This.m_edit.Enabled = True
Else
	This.m_open.Enabled = False
	This.m_edit.Enabled = False
End If

end event

type m_open from menu within m_file
end type

on m_open.create
this.Text="&Open"
end on

event clicked;ParentWindow.Post Dynamic Event ue_openitem()

end event

type m_edit from menu within m_file
end type

on m_edit.create
this.Text="&Edit"
end on

event clicked;ParentWindow.Post Dynamic Event ue_edititem()

end event

type m_- from menu within m_file
end type

on m_-.create
this.Text="-"
end on

type m_close from menu within m_file
end type

event clicked;Close(ParentWindow)

end event

on m_close.create
this.Text="&Close"
end on

type m_exit from menu within m_file
end type

event clicked;ParentWindow.Post Dynamic Event ue_exit()

end event

on m_exit.create
this.Text="E&xit"
end on

type m_options from menu within m_data_manager
m_autoarrange m_autoarrange
m_minimizeonuse m_minimizeonuse
end type

on m_options.create
this.Text="&Options"
this.m_autoarrange=create m_autoarrange
this.m_minimizeonuse=create m_minimizeonuse
this.Item[]={this.m_autoarrange, &
this.m_minimizeonuse}
end on

on m_options.destroy
destroy(this.m_autoarrange)
destroy(this.m_minimizeonuse)
end on

type m_autoarrange from menu within m_options
end type

on m_autoarrange.create
this.Text="&Auto Arrange"
end on

event clicked;If This.Checked Then
	This.Checked = False
Else
	This.Checked = True
End If

ParentWindow.Post Dynamic Event ue_autoarrange(This.Checked)

end event

type m_minimizeonuse from menu within m_options
end type

on m_minimizeonuse.create
this.Text="&Minimize on Use"
end on

event clicked;If This.Checked Then
	This.Checked = False
Else
	This.Checked = True
End If

ParentWindow.Post Dynamic Event ue_minimizeonuse(This.Checked)

end event

type m_window from menu within m_data_manager
m_cascade m_cascade
m_tilehorizontal m_tilehorizontal
m_tilevertical m_tilevertical
m_arrangeicons m_arrangeicons
m_-2 m_-2
m_view m_view
end type

on m_window.create
this.Text="&Window"
this.m_cascade=create m_cascade
this.m_tilehorizontal=create m_tilehorizontal
this.m_tilevertical=create m_tilevertical
this.m_arrangeicons=create m_arrangeicons
this.m_-2=create m_-2
this.m_view=create m_view
this.Item[]={this.m_cascade, &
this.m_tilehorizontal, &
this.m_tilevertical, &
this.m_arrangeicons, &
this.m_-2, &
this.m_view}
end on

on m_window.destroy
destroy(this.m_cascade)
destroy(this.m_tilehorizontal)
destroy(this.m_tilevertical)
destroy(this.m_arrangeicons)
destroy(this.m_-2)
destroy(this.m_view)
end on

type m_cascade from menu within m_window
end type

on m_cascade.create
this.Text="&Cascade"
end on

event clicked;w_data_manager	lw_Parent

lw_Parent = ParentWindow

lw_Parent.iw_Frame.ArrangeSheets(Cascade!)

end event

type m_tilehorizontal from menu within m_window
end type

on m_tilehorizontal.create
this.Text="Tile &Horizontal"
end on

event clicked;w_data_manager	lw_Parent

lw_Parent = ParentWindow

lw_Parent.iw_Frame.ArrangeSheets(TileHorizontal!)

end event

type m_tilevertical from menu within m_window
end type

on m_tilevertical.create
this.Text="Tile &Vertical"
end on

event clicked;w_data_manager	lw_Parent

lw_Parent = ParentWindow

lw_Parent.iw_Frame.ArrangeSheets(Tile!)

end event

type m_arrangeicons from menu within m_window
end type

on m_arrangeicons.create
this.Text="&Arrange Icons"
end on

event clicked;w_data_manager	lw_Parent

lw_Parent = ParentWindow

lw_Parent.iw_Frame.ArrangeSheets(Icons!)

lw_Parent.Post Event ue_arrangeicons()

end event

type m_-2 from menu within m_window
end type

on m_-2.create
this.Text="-"
end on

type m_view from menu within m_window
m_largeicon1 m_largeicon1
m_smallicon1 m_smallicon1
m_list1 m_list1
m_report1 m_report1
end type

on m_view.create
this.Text="&View"
this.m_largeicon1=create m_largeicon1
this.m_smallicon1=create m_smallicon1
this.m_list1=create m_list1
this.m_report1=create m_report1
this.Item[]={this.m_largeicon1, &
this.m_smallicon1, &
this.m_list1, &
this.m_report1}
end on

on m_view.destroy
destroy(this.m_largeicon1)
destroy(this.m_smallicon1)
destroy(this.m_list1)
destroy(this.m_report1)
end on

event clicked;ListViewView		llvv_Current

ParentWindow.Dynamic of_getcurrentstyle(llvv_Current)

Choose Case llvv_Current
	Case ListViewLargeIcon!
		This.m_largeicon1.Checked = True
		This.m_smallicon1.Checked = False
		This.m_list1.Checked = False
		This.m_report1.Checked = False
	Case ListViewSmallIcon!
		This.m_smallicon1.Checked = True
		This.m_largeicon1.Checked = False
		This.m_list1.Checked = False
		This.m_report1.Checked = False
	Case ListViewList!
		This.m_list1.Checked = True
		This.m_largeicon1.Checked = False
		This.m_smallicon1.Checked = False
		This.m_report1.Checked = False
	Case ListViewReport!
		This.m_report1.Checked = True
		This.m_largeicon1.Checked = False
		This.m_smallicon1.Checked = False
		This.m_list1.Checked = False
End Choose

end event

type m_largeicon1 from menu within m_view
end type

event clicked;ParentWindow.Post Dynamic Event ue_chglistview(ListViewLargeIcon!)

end event

on m_largeicon1.create
this.Text="&Large Icon"
end on

type m_smallicon1 from menu within m_view
end type

event clicked;ParentWindow.Post Dynamic Event ue_chglistview(ListViewSmallIcon!)

end event

on m_smallicon1.create
this.Text="&Small Icon"
end on

type m_list1 from menu within m_view
end type

event clicked;ParentWindow.Post Dynamic Event ue_chglistview(ListViewList!)

end event

on m_list1.create
this.Text="L&ist"
end on

type m_report1 from menu within m_view
end type

event clicked;ParentWindow.Post Dynamic Event ue_chglistview(ListViewReport!)

end event

on m_report1.create
this.Text="&Report"
end on

type m_help from menu within m_data_manager
m_examplehelp m_examplehelp
m_-1 m_-1
m_aboutthisexample m_aboutthisexample
end type

on m_help.create
this.Text="&Help"
this.m_examplehelp=create m_examplehelp
this.m_-1=create m_-1
this.m_aboutthisexample=create m_aboutthisexample
this.Item[]={this.m_examplehelp, &
this.m_-1, &
this.m_aboutthisexample}
end on

on m_help.destroy
destroy(this.m_examplehelp)
destroy(this.m_-1)
destroy(this.m_aboutthisexample)
end on

type m_examplehelp from menu within m_help
end type

on m_examplehelp.create
this.Text="&Example Help"
end on

event clicked;f_open_help ("w_data_manager_frame")

end event

type m_-1 from menu within m_help
end type

on m_-1.create
this.Text="-"
end on

type m_aboutthisexample from menu within m_help
end type

on m_aboutthisexample.create
this.Text="&About Data Manager"
end on

event clicked;OpenWithParm(w_about_with_parm, "Data Manager@" + &
						"This example demonstrated populating a ListView " + &
						"with data from a DataStore.  It also shows how to " + &
						"implement the basic ListView and MDI functionality.")

end event

