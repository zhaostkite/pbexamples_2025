$PBExportHeader$w_sp_update.srw
$PBExportComments$Example of updating a DataWindow through a stored procedure
forward
global type w_sp_update from w_center
end type
type cb_close from commandbutton within w_sp_update
end type
type cb_delete from commandbutton within w_sp_update
end type
type cb_insert from commandbutton within w_sp_update
end type
type cb_update from commandbutton within w_sp_update
end type
type cb_retrieve from commandbutton within w_sp_update
end type
type dw_contact from datawindow within w_sp_update
end type
end forward

global type w_sp_update from w_center
integer x = 489
integer y = 352
integer width = 2587
integer height = 1488
string title = "Updating a DataWindow through a Stored Procedure"
long backcolor = 74481808
toolbaralignment toolbaralignment = alignatleft!
cb_close cb_close
cb_delete cb_delete
cb_insert cb_insert
cb_update cb_update
cb_retrieve cb_retrieve
dw_contact dw_contact
end type
global w_sp_update w_sp_update

type variables

end variables

forward prototypes
public function integer wf_update_oracle (long al_row, dwbuffer a_dwbuffer)
public function integer wf_update_sybase (long al_row, dwbuffer a_dwbuffer)
public function integer wf_update_watcom (long al_row, dwbuffer a_dwbuffer)
end prototypes

public function integer wf_update_oracle (long al_row, dwbuffer a_dwbuffer);///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Update the DataWindow using a stored procedure
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The current buffer and row of the DataWindow to be updated are passed in as parameters
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

dwitemstatus	le_status
string			ls_action, &
				ls_last_name, &
				ls_first_name, &
				ls_title, &
				ls_street, &
				ls_city, &
				ls_state, &
				ls_zip, &
				ls_phone,  &
				ls_fax								
integer			li_id, &
				li_old_id

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Check for a valid row, proceed
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if al_row <= 0 then
	return 2
end if

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Stored procedure declaration for oracle
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 declare update_contacts procedure for sp_contacts
		(:ls_action, 
		:li_id, 
		:li_old_id, 
		:ls_last_name, 
		:ls_first_name, 
		:ls_title, 
		:ls_street, 
		:ls_city, 
		:ls_state, 
		:ls_zip, 
		:ls_phone, 
		:ls_fax);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initialize the action variable (determines whether to perform INSERT, DELETE, UPDATE)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ls_action = ""

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Determine the row status
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
le_status = dw_contact.GetItemStatus (al_row, 0, a_dwbuffer)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Determine action to be taken (insert, delete, update), based on the buffer and status of the row
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if a_dwbuffer = primary! then
	choose case le_status

		case new!, newmodified!
			// New row, should be an INSERT statement
			ls_action = 'I'

		case datamodified!
			// Row was modified, so an UPDATE statement should be issued
			ls_action = 'U'

	end choose
else
	if a_dwbuffer = delete! then

		// Only rows with an item status of notmodified! or datamodified! will issue DELETE
		// statements.  We do not care about rows with status of new! or newmodified! that
		// are deleted from the DataWindow, since these rows are never stored in the database.

		if le_status = notmodified! or le_status = datamodified! then
			ls_action = 'D'
		end if
	end if
end if


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// If no action needs to be taken for this row, proceed
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if Len (ls_action) = 0 then
	return 2
end if


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gather parameters from the DataWindow to pass to the stored procedure
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Obtain the original primary key value for this row that was retrieved from the database
li_old_id = dw_contact.GetItemNumber (al_row, "id", a_dwbuffer, true)

// Obtain the current values for this row
li_id = dw_contact.GetItemNumber (al_row, "id", a_dwbuffer, false)
ls_last_name = dw_contact.GetItemString (al_row, "last_name", a_dwbuffer, false)
ls_first_name = dw_contact.GetItemString (al_row, "first_name", a_dwbuffer, false)
ls_title = dw_contact.GetItemString (al_row, "title", a_dwbuffer, false)
ls_street = dw_contact.GetItemString (al_row, "street", a_dwbuffer, false)
ls_city = dw_contact.GetItemString (al_row, "city", a_dwbuffer, false)
ls_state = dw_contact.GetItemString (al_row, "state", a_dwbuffer, false)
ls_zip = dw_contact.GetItemString (al_row, "zip", a_dwbuffer, false)
ls_phone = dw_contact.GetItemString (al_row, "phone", a_dwbuffer, false)
ls_fax = dw_contact.GetItemString (al_row, "fax", a_dwbuffer, false)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Call stored procedure to update the database
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
execute update_contacts;

// Error handling
if SQLCA.SQLCode < 0 then
	MessageBox ("Error " + String (SQLCA.SQLDBCode), SQLCA.SQLErrText)

	// Set Action Code to stop processing the update
	return 1
end if

close update_contacts;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set the Action Code to 2, which skips the regular DataWindow sql statement that would
// have been issued for this row.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Return 2


end function

public function integer wf_update_sybase (long al_row, dwbuffer a_dwbuffer);///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Update the DataWindow using a stored procedure
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The current buffer and row of the DataWindow to be updated are passed in as parameters
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


dwbuffer			le_buffer
dwitemstatus	le_status
string			ls_action, &
					ls_last_name, &
					ls_first_name, &
					ls_title, &
					ls_street, &
					ls_city, &
					ls_state, &
					ls_zip, &
					ls_phone,  &
					ls_fax								
integer			li_id, &
					li_old_id

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Check for a valid row, proceed
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if al_row <= 0 then
	return 2
end if

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Stored procedure declaration for sybase
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 declare update_contacts procedure for sp_contacts
		@action = :ls_action, 
		@contact_id = :li_id, 
		@contact_old_id = :li_old_id, 
		@contact_last_name = :ls_last_name, 
		@contact_first_name = :ls_first_name, 
		@contact_title = :ls_title, 
		@contact_street = :ls_street, 
		@contact_city = :ls_city, 
		@contact_state = :ls_state, 
		@contact_zip = :ls_zip, 
		@contact_phone = :ls_phone, 
		@contact_fax = :ls_fax;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initialize the action variable (determines whether to perform INSERT, DELETE, UPDATE)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ls_action = ""


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Determine the row status
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
le_status = dw_contact.GetItemStatus (al_row, 0, a_dwbuffer)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Determine action to be taken (insert, delete, update), based on the buffer and status of the row
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if a_dwbuffer = primary! then
	choose case le_status

		case new!, newmodified!
			// New row, should be an INSERT statement
			ls_action = 'I'

		case datamodified!
			// Row was modified, so an UPDATE statement should be issued
			ls_action = 'U'

	end choose
else
	if a_dwbuffer = delete! then

		// Only rows with an item status of notmodified! or datamodified! will issue DELETE
		// statements.  We do not care about rows with status of new! or newmodified! that
		// are deleted from the DataWindow, since these rows are never stored in the database.

		if le_status = notmodified! or le_status = datamodified! then
			ls_action = 'D'
		end if
	end if
end if


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// If no action needs to be taken for this row, proceed
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if Len (ls_action) = 0 then
	return 2
end if


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gather parameters from the DataWindow to pass to the stored procedure
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Obtain the original primary key value for this row that was retrieved from the database
li_old_id = dw_contact.GetItemNumber (al_row, "id", a_dwbuffer, true)

// Obtain the current values for this row
li_id = dw_contact.GetItemNumber (al_row, "id", a_dwbuffer, false)
ls_last_name = dw_contact.GetItemString (al_row, "last_name", a_dwbuffer, false)
ls_first_name = dw_contact.GetItemString (al_row, "first_name", a_dwbuffer, false)
ls_title = dw_contact.GetItemString (al_row, "title", a_dwbuffer, false)
ls_street = dw_contact.GetItemString (al_row, "street", a_dwbuffer, false)
ls_city = dw_contact.GetItemString (al_row, "city", a_dwbuffer, false)
ls_state = dw_contact.GetItemString (al_row, "state", a_dwbuffer, false)
ls_zip = dw_contact.GetItemString (al_row, "zip", a_dwbuffer, false)
ls_phone = dw_contact.GetItemString (al_row, "phone", a_dwbuffer, false)
ls_fax = dw_contact.GetItemString (al_row, "fax", a_dwbuffer, false)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Call stored procedure to update the database
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
execute update_contacts;

// Error handling
if SQLCA.SQLCode < 0 then
	MessageBox ("Error " + String (SQLCA.SQLDBCode), SQLCA.SQLErrText)

	// Set Action Code to stop processing the update
	return 1
end if

close update_contacts;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set the Action Code to 2, which skips the regular DataWindow sql statement that would
// have been issued for this row.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Return 2


end function

public function integer wf_update_watcom (long al_row, dwbuffer a_dwbuffer);///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Update the DataWindow using a stored procedure
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The current buffer and row of the DataWindow to be updated are passed in as parameters
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

dwitemstatus	le_status
string			ls_action, &
					ls_last_name, &
					ls_first_name, &
					ls_title, &
					ls_street, &
					ls_city, &
					ls_state, &
					ls_zip, &
					ls_phone,  &
					ls_fax								
integer			li_id, &
					li_old_id


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Check for a valid row, proceed
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if al_row <= 0 then
	return 2
end if

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Stored procedure declaration for watcom
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 declare update_contacts procedure for sp_contacts
		action = :ls_action, 
		contact_id = :li_id, 
		contact_old_id = :li_old_id, 
		contact_last_name = :ls_last_name, 
		contact_first_name = :ls_first_name, 
		contact_title = :ls_title, 
		contact_street = :ls_street, 
		contact_city = :ls_city, 
		contact_state = :ls_state, 
		contact_zip = :ls_zip, 
		contact_phone = :ls_phone, 
		contact_fax = :ls_fax;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initialize the action variable (determines whether to perform INSERT, DELETE, UPDATE)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ls_action = ""


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Determine the row status
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
le_status = dw_contact.GetItemStatus (al_row, 0, a_dwbuffer)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Determine action to be taken (insert, delete, update), based on the buffer and status of the row
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if a_dwbuffer = primary! then
	choose case le_status

		case new!, newmodified!
			// New row, should be an INSERT statement
			ls_action = 'I'

		case datamodified!
			// Row was modified, so an UPDATE statement should be issued
			ls_action = 'U'

	end choose
else
	if a_dwbuffer = delete! then

		// Only rows with an item status of notmodified! or datamodified! will issue DELETE
		// statements.  We do not care about rows with status of new! or newmodified! that
		// are deleted from the DataWindow, since these rows are never stored in the database.

		if le_status = notmodified! or le_status = datamodified! then
			ls_action = 'D'
		end if
	end if
end if


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// If no action needs to be taken for this row, proceed
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if Len (ls_action) = 0 then
	return 2
end if


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gather parameters from the DataWindow to pass to the stored procedure
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Obtain the original primary key value for this row that was retrieved from the database
li_old_id = dw_contact.GetItemNumber (al_row, "id", a_dwbuffer, true)

// Obtain the current values for this row
li_id = dw_contact.GetItemNumber (al_row, "id", a_dwbuffer, false)
ls_last_name = dw_contact.GetItemString (al_row, "last_name", a_dwbuffer, false)
ls_first_name = dw_contact.GetItemString (al_row, "first_name", a_dwbuffer, false)
ls_title = dw_contact.GetItemString (al_row, "title", a_dwbuffer, false)
ls_street = dw_contact.GetItemString (al_row, "street", a_dwbuffer, false)
ls_city = dw_contact.GetItemString (al_row, "city", a_dwbuffer, false)
ls_state = dw_contact.GetItemString (al_row, "state", a_dwbuffer, false)
ls_zip = dw_contact.GetItemString (al_row, "zip", a_dwbuffer, false)
ls_phone = dw_contact.GetItemString (al_row, "phone", a_dwbuffer, false)
ls_fax = dw_contact.GetItemString (al_row, "fax", a_dwbuffer, false)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Call stored procedure to update the database
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
execute update_contacts;

// Error handling
if SQLCA.SQLCode < 0 then
	MessageBox ("Error " + String (SQLCA.SQLDBCode), SQLCA.SQLErrText)

	// Set Action Code to stop processing the update
	return 1
end if

close update_contacts;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set the Action Code to 2, which skips the regular DataWindow sql statement that would
// have been issued for this row.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Return 2


end function

event open;call super::open;dw_contact.SetTransObject (SQLCA)
end event

on w_sp_update.create
int iCurrent
call super::create
this.cb_close=create cb_close
this.cb_delete=create cb_delete
this.cb_insert=create cb_insert
this.cb_update=create cb_update
this.cb_retrieve=create cb_retrieve
this.dw_contact=create dw_contact
iCurrent=UpperBound(this.Control)
this.Control[iCurrent+1]=this.cb_close
this.Control[iCurrent+2]=this.cb_delete
this.Control[iCurrent+3]=this.cb_insert
this.Control[iCurrent+4]=this.cb_update
this.Control[iCurrent+5]=this.cb_retrieve
this.Control[iCurrent+6]=this.dw_contact
end on

on w_sp_update.destroy
call super::destroy
destroy(this.cb_close)
destroy(this.cb_delete)
destroy(this.cb_insert)
destroy(this.cb_update)
destroy(this.cb_retrieve)
destroy(this.dw_contact)
end on

event close;call super::close;
//w_main.Show()
end event

type cb_close from commandbutton within w_sp_update
integer x = 2085
integer y = 1228
integer width = 379
integer height = 100
integer taborder = 40
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "MS Sans Serif"
string text = "&Close"
end type

on clicked;close (parent)
end on

type cb_delete from commandbutton within w_sp_update
integer x = 1445
integer y = 1228
integer width = 622
integer height = 100
integer taborder = 50
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "MS Sans Serif"
boolean enabled = false
string text = "&Delete Contact"
end type

event clicked;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Delete the current contact
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

long	ll_cur_row
string	ls_last_name, &
		ls_first_name


ll_cur_row = dw_contact.GetRow()

if ll_cur_row > 0 then

	// Confirm the delete
	ls_last_name = dw_contact.object.last_name[ll_cur_row]
	ls_first_name = dw_contact.object.first_name[ll_cur_row]
	if IsNull (ls_last_name) then
		ls_last_name = ""
	end if
	if IsNull (ls_first_name) then
		ls_first_name = ""
	end if
	
	if MessageBox ("Please confirm", "Delete " + ls_first_name + &
					" " + ls_last_name + " from the contact list?", question!, yesno!) = 1 then
	
		dw_contact.DeleteRow (ll_cur_row)

		// If there are no more rows left, disable the delete button
		if dw_contact.RowCount() = 0 then
			this.enabled = false
		end if

		cb_update.enabled = true
	end if
else
	MessageBox ("", "Please select the contact that you want to delete")
end if
end event

type cb_insert from commandbutton within w_sp_update
integer x = 805
integer y = 1228
integer width = 622
integer height = 100
integer taborder = 60
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "MS Sans Serif"
string text = "&New Contact"
end type

on clicked;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Add a new contact
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

long	ll_new_row


ll_new_row = dw_contact.InsertRow (0)
dw_contact.ScrollToRow (ll_new_row)
dw_contact.SetColumn (1)
dw_contact.SetFocus ()

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Enable updates
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
cb_update.enabled = true
end on

type cb_update from commandbutton within w_sp_update
integer x = 407
integer y = 1228
integer width = 379
integer height = 100
integer taborder = 30
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "MS Sans Serif"
boolean enabled = false
string text = "&Update"
end type

on clicked;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Update the DataWindow
// The sqlpreview event on the DataWindow control will call the stored procedure to control
// the update.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if dw_contact.Update() = 1 then
	commit;
	this.enabled = false
else
	rollback;
end if
end on

type cb_retrieve from commandbutton within w_sp_update
integer x = 9
integer y = 1228
integer width = 379
integer height = 108
integer taborder = 20
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "MS Sans Serif"
string text = "&Retrieve"
end type

on clicked;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Retrieve the DataWindow
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

dw_contact.Retrieve ()
end on

type dw_contact from datawindow within w_sp_update
integer x = 23
integer y = 28
integer width = 2437
integer height = 1140
integer taborder = 10
string dataobject = "d_sp_contacts"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event sqlpreview;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Update the DataWindow using a stored procedure
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int li_rc
dwbuffer l_dwbuffer

//Hold buffer in temporary variable
l_dwbuffer = buffer
if request = PreviewFunctionUpdate! then
	CHOOSE CASE Lower( Left(sqlca.dbms,2))
		CASE "sy"
			li_rc = wf_update_sybase (row, l_dwbuffer)
		CASE "or" 
			li_rc = wf_update_oracle (row, l_dwbuffer)
		CASE ELSE
			li_rc = wf_update_watcom (row, l_dwbuffer) 
	END CHOOSE
end if
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set the Return Code to the return value of the function call.  
// If actioncode = 2, then skip the regular DataWindow sql statement that would 
// have been issued for this row.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
return li_rc 

end event

on itemchanged;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// A change has been mad, Enable the update button
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
cb_update.enabled = true
end on

event editchanged;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// A change has been made, Enable the update button
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
cb_update.enabled = true
end event

on retrieveend;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Enable/Disable command buttons
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
cb_update.enabled = false

if this.RowCount() > 0 then
	cb_delete.enabled = true
end if

end on

event scrollvertical;//////////////////////////////////////////////////////////////////////////////////////////////////////
// scrollvertical script for dw_contact
//////////////////////////////////////////////////////////////////////////////////////////////////////

string ls_frp

// Make the visible row the current row.
ls_frp = this.object.DataWindow.FirstRowOnPage
IF IsNumber(ls_frp) Then
	SetRow(long(ls_frp))
End If

end event

